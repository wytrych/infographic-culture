<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg class="chart" viewBox="0 0 874 738"
		shape-rendering="geometricPrecision"
		text-rendering="geometricPrecision"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink">
<rect x="0" y="0" width="874" height="738" style="stroke:none; fill: none" />
<style type="text/css">

@import url(http://fonts.googleapis.com/css?family=Roboto:300,400);

.middle {
	text-anchor: middle;
	font-size: 0.9em;
	fill: white;
}

#nazwyInstytucji,
#labelContainer {
	font-size: 0.95em;
	font-weight: 400;
}

#rokContainer,
.infoText {
	font-weight: 300;
}

.info-box rect {
	fill: yellow;
	stroke: black;
	stroke-width: 1;
}
.info-box text {
	text-anchor: end;
}

.suma {
	fill: white;
	pointer-events: none;
	font-size: 2.5em;
	text-anchor: middle;
}

.nofill {
	fill: black;
	fill-opacity: 0;
}

.yearTick {
	stroke-width: 5;
	stroke: black;
	transition: stroke .3s;
}

.ticker:hover .yearTick {
	stroke: yellow;
}

circle.year, circle.money {
	fill: #013779;
}

#lupa path {
	transition: stroke-opacity .3s;
}

.invisible {
	stroke-opacity: 0;
}

.ticker {
	cursor: pointer;
}

rect.tloTytul {
	fill: #609BFA;
}

rect.darker {
	fill: #02275E;
	transition: fill .3s;
}

g.b_majbiez:hover .darker,
g.b_inst:hover .darker {
	fill: #F6E8C3;
}

g.b_majbiez.selected .darker,
g.b_inst.selected .darker {
	fill: #84B6EF;
	color: black;
}

svg {
	background: #2281C7;
}

.button {
	cursor: pointer;
}

#mapa path {
	stroke:#000000;
	stroke-width:20;
	stroke-linejoin:round;
	stroke-miterlimit:4;
	stroke-opacity:1;
	stroke-dasharray:none;
	cursor: pointer;
}


#mapa g.selected path, #mapa path.selected {
	fill: #F6E8C3;
}

#mapa g path, #mapa path {
	fill: #2775B6;
	transition: fill .3s;
}

#mapa g:not(.selected):hover path, #mapa path[id]:not(.selected):hover {
	fill: #95900b;
}

.strzalka {
	fill: black;
	cursor: pointer;
}

.maj:not(text) {
	fill: #fc8d59;
}

.biez:not(text) {
	fill: #91cf60;
}

.values {
	color: green;
}

.chart {
	visibility: hidden;
	//border:solid black 1px;
}

text {
	font-family: Roboto, Calibri, Arial, sans-serif;
}

.opowiesc {
	font-size:.8em;
}

.naglowek {
	text-anchor: middle;
	font-size:1.2em;
	fill: white;
}


#przezroczyste rect {
	fill:black;
	opacity:0;
	cursor: pointer;
}

.zmien {
	transition: transform 1s;
}

.link {
	opacity:.5;
}


.txt {
	fill: yellow;
	font-size: 30pt;
}

.tlo {
	fill: blue;
	fill-opacity:0;
	stroke-width:10;
	stroke-opacity:0.8;
}

.rc {
	stroke:black;
	stroke-opacity: 0;
	stroke-width:4px;
	fill:none;opacity:0;
}


.bar {
  pointer-events: none;
  fill: #999999;
}

.bar2 {
  opacity: 1;
}

.link.x {
  opacity:.15;
}

.bar2.x {
  opacity:.4;
}

text.bar {
	fill:black;
}

.kinemato.bar:not(text) {
  fill: #543005;
}

.pisf.bar:not(text) {
  fill: #8c510a;
}

.teatry.bar:not(text)  {
  fill: #bf812d;
}

.filh.bar:not(text)  {
  fill: #dfc27d;
}

.domykult.bar:not(text)  {
  fill: #f6e8c3;
}

.galerie.bar:not(text)  {
  fill: #f5f5f5;
}

.centrakult.bar:not(text)  {
  fill: #c7eae5;
}

.biblio.bar:not(text)  {
  fill: #80cdc1;
}

.muz.bar:not(text)  {
  fill: #35978f;
}

.osrodki.bar:not(text)  {
  fill: #00FFCC;
}

.ochrona.bar:not(text)  {
  fill: #003c30;
}

.archiwa.bar:not(text)  {
  fill: black;
}

.axis text {
  font: 10px ;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
}

.x.axis path {
  display: none;
}

</style>



<g class="klocki" transform="translate(250 50)">
	<g class="ramki"></g>


     <g class="opowiesc">
     </g>

     <g id="nazwyInstytucji" transform="translate(-40 10)"> </g>

     <g id="labelContainer"> </g>

     <g id="przezroczyste"></g>
</g>


<g class="button" transform="translate(10 200)">
	<rect x="0" y="0" width="210" height="240" class="button darker" style="pointer-events:none"/>
  <g
     id="back" transform="translate(-30 20) scale(.4)" style="stroke-opacity:0;fill-opacity:0">
    <path
       d="M 159.6,404.7 C 193.2,404.4 195.7,367.9 153,370.1"
       id="path2985"
       style="fill:none;stroke:white;stroke-width:6.3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none" />
    <path
       d="M 128.2,370.6 152.9,384.1 152.9,356.9 z"
       id="path3755"
       style="fill:white;stroke:white;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none" />
<rect x="110" y="330" width="100" height="100" style="fill:red;fill-opacity:0" onclick="wojewod('back')" />
  </g>
        <text class="naglowek strzalka" y="26" x="55" style="text-anchor:start">Local govt.</text>
	<text class="naglowek strzalka" y="220" x="105" style="text-anchor:middle" id="wojewodztwo"></text>
<g id="mapa" transform="translate(20 40) scale(.08)">  
    <path
       d="M 549.9,93.01 553.9,112.4 563.9,118.2 564.5,137 567.9,150 560.9,149 561,159 557.9,170 564.9,171 C 564.9,176.5 566.5,184.2 561.8,188.1 555.6,193.2 542.7,190.1 540.2,200.1 538.6,206.7 542.6,209.4 544,215 547.5,228.4 554.8,242 556.8,256 557.7,262.4 552.5,267.9 551.6,274 550.9,278.5 553.9,282.8 554.9,287 560.3,286.1 560.3,280.3 562.9,276 L 563.9,276 C 566.2,280.7 564.8,285.4 566.8,289.9 569.6,296.3 579.3,301.3 585.9,302 586.6,306.7 589.9,314.3 586.2,318.5 580.8,324.3 569.1,318.1 565.3,327.1 562.6,333.4 572.7,338.1 572.9,345 L 579.9,345 C 577.9,352.8 568.4,356.6 567,364 565.3,373.4 577.8,386.9 571.9,396 L 581.9,428 C 584.5,427.6 588.5,425.4 590.9,426.9 594.1,428.9 592,432.9 594,435.4 598.7,441.3 606.9,434.5 608.9,430 L 648.3,433.3 669.9,444 674.6,430 676.1,417 685.9,403 693.9,404 694.9,415 C 701.2,415.8 705,416.7 708.9,411 L 709.9,411 718.9,421 C 724.5,419.2 721.3,415.2 719.9,411 725.2,411.2 729.8,413.2 732.9,408 L 740.9,413 748.9,402 738.9,400 736.9,383 C 742.5,382.8 746.7,387 751.9,386.1 765.2,383.6 772.6,371.8 757.9,365 L 757.9,364 777.9,361 C 779.1,368.5 785.5,372.7 791.9,376 L 796.9,371 799.9,355 C 807.2,360.2 808.9,361.7 817.9,361 L 818.9,368 824.9,365 825.9,370 826.9,370 827.9,366 828.9,366 829.9,370 C 840.1,368.2 840.2,373.9 837.9,382 L 863.9,385.3 874.9,387 876.9,381 886.9,381 885.9,387 888.9,387 C 889.7,392 891.8,394.6 896.9,395 L 895.9,390 C 903.2,390 908.1,390.7 910.9,383 L 936.9,383 931.9,411 959.9,413 959.9,418 C 972.7,412.3 989.9,414 1004,414 1004,405.2 1011,398.3 1020,398 1021,383.2 1023,373.2 1037,365 L 1039,339 1061,344.9 1069,353 C 1066,336 1081,321.1 1081,304 L 1086,304 1086,298 1070,297.5 1057,301.7 1051,297 1054,282 C 1049,280.1 1041,271.8 1037,278 1033,275.5 1030,273.2 1034,269 L 1034,267 C 1030,265.6 1025,264.4 1023,260.8 1021,257.9 1024,255 1024,252 1024,243.6 1022,232.9 1028,225.1 1030,221.4 1037,221.3 1038,216.9 1040,211.7 1035,207.8 1034,203 1028,203 1026,182 1026,178 1026,174.9 1021,172.2 1024,169.2 1029,164.5 1041,167.7 1047,165.7 1063,160.3 1078,151.1 1093,143.2 1098,140.4 1107,136.1 1109,130 1102,130.3 1096,137.4 1090,140.7 1076,148.4 1060,156.7 1045,161.3 1022,168.2 993.9,170.5 969.9,168.2 964.1,167.6 957.6,169.1 951.9,167.4 946.7,166 944,160.7 938.9,159.1 934.2,157.5 929.6,159.2 924.9,156.6 920.4,154.1 919,148.9 914.8,146.6 907.9,142.8 903.6,143.8 899.1,136 892.5,124.9 896.6,108.3 894.7,96.01 893.3,86.55 887.2,81.15 887.9,71.01 L 886.9,71.01 C 876.4,80.41 880.3,55.46 878.3,52.03 875.1,46.79 867.8,44.44 866.4,38.01 865.1,32.16 869.8,27.3 867.9,21.01 L 882.9,29.58 914.5,52.43 928.5,61.06 944.9,85.01 C 944.9,53.32 900.2,35.78 876.9,21.81 868.8,16.96 860.8,5.459 851.9,3.408 838.9,0.414 822.4,6.454 808.9,6.408 805.5,6.396 802.4,4.545 798.9,4.738 773.3,6.173 748.5,17.22 723.9,23.12 692.7,30.61 661.3,34.33 631.9,48.33 613.5,57.13 601.3,73.65 583.9,83.48 575,88.52 560.1,91.52 549.9,93.01 z"
       id="pom"
	onclick="wojewod(this.id)"
     />
    <path
       d="M 1706,142 1706,143 C 1710,147.5 1713,151.2 1708,156 1712,171.1 1691,174.4 1681,172 L 1659,185.3 1652,197 1652,199 C 1658,203 1659,209.6 1664,214.4 1666,216.6 1669,214.8 1672,216 1676,217.9 1678,224 1679,228 1680,233.3 1674,237.6 1676,242.9 1678,246.3 1682,247.5 1684,250.2 1689,256.2 1691,264.7 1695,271 1699,276.5 1707,282.4 1709,289 1712,304.1 1702,310 1698,322 1696,327 1698,333.6 1697,339 1688,336.5 1673,350.9 1675,360 L 1667,358 C 1665,365.9 1661,367 1653,367 L 1651,384 C 1638,375.9 1634,387.7 1624,395.3 1613,404.3 1605,416.4 1593,425.1 1587,429.3 1578,429.8 1573,433.8 1569,437.4 1569,443 1564,446 1563,439.9 1556,439.1 1551,442.2 1545,446 1547,456.9 1540,459.4 1534,461.3 1528,454.7 1522,454.1 1508,452.7 1499,456.5 1486,459 1487,464.2 1488,466.8 1493,469 1490,476.1 1495,485.1 1501,489 1498,493.1 1497,496.1 1498,501 L 1503,499 1510,508 1490,508 1490,514 1497,517 1492,525 C 1494,530.8 1499,534.4 1501,540 1502,544.4 1506,550.5 1506,555 1508,562.2 1506,572.6 1517,574.6 1521,575.4 1528,573.1 1532,572 1534,576.7 1540,589.4 1546,589.4 1549,589.4 1552,585.4 1555,584 1556,588.4 1553,593.3 1558,595 L 1557,599 1549,597 C 1548,601.7 1544,605.9 1548,610.3 1553,615.9 1571,614.4 1566,625 L 1566,626 1572,635 1566,639 1566,640 1570,653 1575,653 C 1573,661.2 1581,659.6 1586,657 1589,661.9 1600,659.8 1604,655.4 1606,653.5 1605,650.6 1607,649 1614,644.4 1625,649.5 1630,654 L 1626,656 1626,657 1633,660 1627,664 1626,664 1620,663 1628,680.5 1637,688 1638,688 C 1640,684.2 1642,682.4 1647,682 L 1647,676 1660,681.4 1659,694 1657,731 1663,744 C 1669,745.4 1680,758.6 1682,765 1683,769.6 1681,774.4 1683,778.9 1685,782.5 1689,782.2 1691,785.3 1693,789 1690,793 1693,796.5 1698,801.6 1707,808 1714,808.8 1719,809.3 1723,807.7 1728,808.6 1734,809.8 1738,813.8 1744,814 1750,814.2 1758,810.8 1764,811.6 1777,813.2 1789,822.4 1793,834 1804,831.5 1810,832.3 1820,835 1838,803.5 1850,764.1 1880,741.1 1894,730.9 1911,729.8 1925,722.6 1932,718.8 1939,711.5 1945,706.1 1952,700 1961,689.7 1961,680 1961,672.2 1962,662.6 1960,655 1959,648.5 1955,642.9 1955,636 1955,629 1954,621 1955,614 1956,610.4 1959,606.7 1958,603 1956,588.1 1947,574.5 1944,560 1941,550 1951,543.2 1946,532 1945,527 1940,524.8 1937,520.7 1933,515.5 1930,507.9 1926,502 1915,481.8 1906,460.2 1897,439 1892,427.4 1885,416.3 1882,404 1876,384.5 1871,364.5 1866,345 1865,339.8 1861,335.3 1860,330 1859,322.4 1863,314.5 1862,307 1861,302.7 1857,300 1855,296 1853,290.5 1853,284.4 1851,279 1848,274.9 1844,271.8 1843,267 1841,258.8 1849,252.6 1850,245 1851,237.8 1846,226.6 1843,220 1840,212 1834,209 1830,202.6 1825,195.1 1823,187 1814,182.2 1808,178.7 1799,180.5 1793,177 1786,173.4 1780,167.5 1774,164.3 1769,162.2 1764,166.5 1760,163.3 1757,160.6 1758,155.7 1755,152.9 1753,150.3 1748,151.4 1745,149.2 1743,147.3 1743,144 1741,142.1 1739,139.7 1734,140.1 1731,139.3 1720,136.8 1715,133 1706,142 z"
       id="podl"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 1132,138 1121,148 1101,170 1082,172 1066,186 1052,208 1049,210 1057,190 C 1054,191.1 1052,194.8 1049,195.3 1045,195.8 1035,189.8 1032,194.6 1028,201.4 1041,210 1039,217 1038,222 1031,221 1028,225.2 1023,233.8 1026,243.8 1025,252.6 1025,255.3 1021,257.8 1023,260.5 1025,264.5 1032,266 1036,269 1034,270.1 1030,273.7 1034,275.3 1039,277.2 1051,274.9 1054,283.2 1055,288.6 1047,296.9 1055,300.5 1060,302.5 1065,297.9 1070,296.8 1075,295.5 1081,297 1087,297 L 1088,306 1082,305 C 1082,314.1 1079,322.7 1075,331 1073,335 1069,337.8 1072,342 L 1072,343 C 1069,346.3 1069,349.1 1071,353 1065,352.5 1065,348.1 1061,345.3 1057,343.2 1043,337.9 1040,341.6 1038,344 1037,352.8 1037,356 1037,359.4 1037,362.7 1038,366 1022,369.7 1021,385.8 1021,399 1014,399 1001,404.6 1006,413.9 1010,420.7 1017,418.4 1017,428 1024,432 1017,436.2 1018,442 1019,448.7 1025,450.3 1023,458 1032,465.4 1023,474.8 1037,480 1038,471 1044,474.5 1051,474 1051,481.5 1053,487.3 1061,488 L 1060,494 1065,490 1067,493 C 1074,492.8 1077,497.8 1077,504 L 1086,505 C 1090,499.9 1101,497.4 1106,503.4 1111,509.7 1111,520.5 1119,525 L 1118,528 C 1110,527 1110,533.7 1110,540 1125,541.4 1117,553.8 1123,563.7 1125,567.9 1134,569 1138,570 L 1139,557 1150,545 C 1157,552.8 1153,561.6 1165,567 1177,572.4 1189,556.9 1198,569 1213,558.1 1231,576.9 1248,567.9 1258,562.1 1250,555.7 1252,548 1253,543 1259,538.7 1263,535 1267,529.9 1274,528.1 1278,535 L 1296,527.6 1303,526 1313,513 1312,509 C 1320,508.5 1332,512.4 1337,504 L 1347,503 1344,498 1344,497 C 1350,493.9 1352,492 1359,493 L 1365,485 1366,485 C 1375,500.4 1386,489 1394,478 L 1395,478 1403,482 C 1407,475.3 1414,472.7 1421,470 L 1421,475 C 1426,472.4 1429,473 1434,475 L 1451,467 1450,463 C 1453,463 1456,464.8 1460,464.6 1470,463.9 1483,459 1494,456.7 1499,455.7 1503,452.3 1508,452.1 1513,451.8 1520,452.3 1525,454 1529,455.6 1534,459.4 1539,458.8 1545,458.1 1554,424.9 1565,445 1569,442.1 1569,436.8 1573,433.5 1578,429.1 1588,428.5 1594,424.1 1605,415.7 1613,403.4 1624,394.7 1634,387.3 1638,375.8 1651,383 L 1652,366 C 1660,366 1665,365.8 1666,357 L 1674,359 1690,336 1696,338 C 1697,332.8 1695,327 1697,322.1 1702,310.1 1713,302.3 1707,287 1705,279.9 1697,274.7 1693,268 1688,258 1685,248.7 1674,244 1675,239.2 1679,233.6 1679,229 1678,225.1 1676,217.8 1672,216.3 1669,215.2 1666,217.5 1664,215.4 1659,211.5 1653,201.3 1651,196 1656,194 1656,189.2 1657,184 1662,183.5 1671,180.6 1676,177.8 1678,176.4 1679,173.4 1682,172.6 1692,169.3 1712,172.7 1707,155 1713,151.8 1710,146.4 1705,144 1700,155.1 1684,150.1 1674,151.3 1641,155.2 1608,155.3 1575,159.3 1529,164.9 1483,170.8 1437,171.9 1430,172.1 1422,169.6 1415,169.1 1390,167.4 1365,166.6 1340,164.2 1281,158.6 1221,155.6 1163,146.7 1153,145.1 1142,140.1 1132,138 z"
       id="warmaz"
	onclick="wojewod(this.id)"
       />
    <g
	onclick="wojewod(this.id)"
       id="zachpom">
      <path
         d="M 158.9,252 C 162,252.4 167.9,249.4 170.4,251.7 173,254.2 168.7,257.4 167.3,259.2 162.1,266 162.9,276 162.9,284 145.6,280.5 134.7,301.5 132.3,317 130.9,325.8 132.5,338.8 119.9,336 118.2,341.7 113.8,356.6 118.9,361 117.7,364.9 118,374.3 122.9,375 L 120.7,384.4 109.6,367.4 84.13,355.5 68.92,338 C 67.36,345.1 67.66,350.6 59.92,353 62.6,364.1 65.03,376.6 65.83,388 66.24,393.8 64.41,400.4 65.75,406 67.4,412.9 72.81,418.1 74.39,425 77.83,440 77.54,455.7 80.07,471 81.39,479 86.53,488.8 84.48,497 82.72,504.1 74.81,507.8 72.71,515 70.51,522.6 73.14,530.4 72.71,538 72.16,547.9 65.89,557.3 60.16,565 55.1,571.8 48.15,578.1 40.92,582.5 36.25,585.4 30.07,587.1 26.36,591.3 20.94,597.5 25.31,608.6 22.93,616 21.54,620.4 17.08,624.3 17.21,629 17.36,634.5 31.67,639.3 35.41,644 44.57,655.6 55.25,665.2 64.4,677 72.41,687.4 75.18,695.8 85.92,704 L 86.92,704 C 94.68,694.7 98.46,696.4 108.9,699 116.7,685.7 123.7,708.6 134.6,700 138.2,697.2 146,684.6 146.7,680 147.5,675.2 145.9,669.7 147.8,665.1 150.2,659.5 157.7,659.3 160.7,654 162.6,650.6 161.4,634.8 168.9,639 L 172.9,635 167.9,633 170.9,624 C 178.5,627.1 183.8,632.1 187.9,639 190.8,635.1 193,633.5 197.9,633 198.7,642.8 206.2,639.7 212.9,637.3 225.8,632.7 239.1,626.9 250.9,620 L 243.9,603 259.9,606 C 266.3,594.3 285.9,586.6 298.9,586 301.1,602.3 317.8,603.1 326.9,592 L 327.9,592 C 331.9,597.2 335.7,595.8 340.9,593 L 340.9,591 337.9,590 C 339.7,584.9 344.1,582.1 348.9,580 L 344.9,572 C 354.3,572 361.9,562.3 361.9,553 369.4,553 382.6,551.4 388,558.3 395.7,568.2 376.4,586 397.9,582 399.3,588.2 405.3,588.7 410.9,589.2 422.1,590.1 434.3,580.1 444.9,577 446.5,581 448.9,581 452.9,581 L 451.9,576 C 459,573.6 467.4,565.2 459.9,559 L 459.9,558 C 463.3,554.8 463.8,552.3 461.9,548 466.9,546.2 467.4,543 466.9,538 472.5,536.8 477.5,534.6 482.8,533.4 485.4,532.8 488.2,534.5 490.6,533 493.9,530.9 493.2,526.3 495.1,523.3 498.2,518.3 503.9,518.6 508.9,519 L 509.9,524 C 515.9,522 512.3,515.9 514.4,511.1 517,505.3 524.9,501.5 530.9,501 518.1,480.7 479.7,487.4 482.9,457 479.7,453.4 481.9,448.3 486.9,447.4 490.1,446.8 492.7,449.7 495.9,449.7 502,449.6 517.5,447.6 522.9,445 530.7,441.3 538.2,433.3 540.2,425 541.3,420.2 540.4,415.5 543,411 547,403.9 554,404.8 557.9,399 L 559.9,399 561.9,403 562.9,403 C 565.9,398.5 567.6,396.5 572.9,395 L 568.9,374 566.2,363.7 578.9,346 571.9,346 C 571.9,338.7 561.7,332.2 565.2,326.1 569.6,318.4 585.5,323.3 586.8,315 588.9,301.4 574.2,300.3 567.5,291.8 564,287.4 566.2,281.9 563.9,277 559.4,281.5 561.7,287.1 553.9,288 553.5,283.6 550.4,279.3 550.7,275 551.1,269.1 556.2,264 556.3,258 556.5,249.4 550.6,236 547.4,227.9 545,221.7 544.6,212.4 537.9,210 539.6,204.2 538,198.7 543.4,194.4 548.7,190.3 558.3,192 562.3,186.8 567.5,180 563.9,171.2 555.9,171 L 559.9,148 567.9,149 563.8,137 563.3,118.3 553.7,113.3 548.9,94.01 C 535.7,94.01 522.1,93.32 509.9,99.38 490.7,109 481.2,127.4 469,144 457.3,160 443.6,172.9 425.9,182 408.1,191.2 389.5,186.4 370.9,190.4 353.1,194.3 335.8,202.4 317.9,206.5 307.6,208.8 296,207.9 285.9,210.5 267.5,215.3 250.5,224.2 231.9,229.1 218.1,232.8 204.7,239.4 190.9,242.5 180.9,244.8 167.4,245.6 158.9,252 z"
/>	
      <path
         d="M 71.92,280 70.92,298 82.92,290.6 94.92,289 92.92,300 123.6,305.8 126.9,321 C 128.1,313 132.5,300.9 136.9,294 140,289.3 144.6,286.3 146.9,281 150.7,272.1 149.8,259.4 161.9,258 L 161.9,256 C 158.3,255.4 154.6,253.6 150.9,255.1 147.2,256.7 145,260.9 140.9,261.5 131.1,263 120.4,261.1 110.9,266.1 94.89,274.5 91.74,290.8 71.92,280 z"
         />
      <path
         d="M 154.9,268 151.9,277 C 157.7,275.6 161.3,271.6 154.9,268 z"
         />
      <path
         d="M 57.92,275 C 57.63,289.3 56.03,303.5 71.92,311 L 66.03,291 66.85,279.6 57.92,275 z"
         />
      <path
         d="M 80.92,298 86.92,298 84.92,293 80.92,298 z"
         />
      <path
         d="M 71.92,303 76.92,313 77.92,313 85.92,304 71.92,303 z"
         />
    </g>
    <path
       d="M 800.9,356 C 800.9,360.7 800.5,363.8 796.9,367 L 797.9,372 791.9,377 778.9,370 776.9,363 C 771.6,365.4 761.5,360.5 759.9,366 775.9,370.6 762.8,384.2 752.9,386.5 747.3,387.9 743.7,383.1 737.9,384 L 740.9,398.3 749.9,405 746.9,409 740.9,415 732.9,409 C 729.4,413.2 726,412.2 720.9,412 723.1,416.9 724.6,420.9 717.9,422 L 709.9,412 708.9,412 C 703.9,417.9 701,416.3 693.9,416 L 692.9,405 C 686.3,404.7 679.2,410.7 676.7,417.1 672.7,427 674.2,438.9 668.6,449 665.2,455.4 657.8,459.3 653.4,465.1 650.3,469.3 652.4,474.5 649.9,478.7 647.5,482.7 643,484.5 640.9,489 651.8,490.8 657.1,503.3 663,511 665.3,514.1 671.3,519.2 671.9,523.1 672.3,526.1 670.5,532.4 668.9,534.9 665.9,539.6 653.2,541.2 647.9,542 L 647.9,562 655.9,565 649.9,570 C 649.9,575.6 654.1,588.6 645.9,589 646.7,595.9 646.5,604.1 639.9,608 639.9,610.4 639.1,612.7 639.1,615.1 638.8,626.1 649.9,619.9 655.9,622.7 661.1,625.1 665,630.2 670.9,630 675.8,641.8 683.7,651.7 682.9,665 L 679.9,663 C 679.9,668.6 679.2,692.4 667.9,681 664.7,682.9 659.9,684.8 661.9,689 L 661.9,690 C 657.3,694.5 670.8,697.7 673.9,698 674,702.3 676.1,706.6 671.9,709 L 671.9,713 676.9,712 678.9,716 C 690.8,710.9 709.1,701.4 701.9,723 L 711.9,724 712.9,737 713.9,737 723.9,731 C 723,726.6 724.3,725.4 727.9,723 L 728.9,729 733.9,723 734.9,723 C 738.3,726.9 741.7,729.6 746.9,730 L 745.9,734 752.9,732 753.9,732 764.9,749 C 768,744.9 769.7,749.9 769.9,753 L 779.9,752 776.9,762 781.9,759 C 792.1,761.6 795.8,759.5 797.9,771 802.8,771.4 804.5,773.4 805.9,778 812,778.2 819,779.5 820.9,786 L 835.9,785.1 856.9,770 C 856.9,781.1 854.1,797.1 870.7,790.1 874.6,788.5 877.1,783.2 881.9,783.7 890.3,784.5 892.3,795.8 900.9,794 L 910.3,799.4 918.1,813.7 926.8,822 933.4,834.4 941.9,832.6 963.9,827 962.9,823 966.9,823 967.9,817 969.9,817 976.9,830 C 980.3,831.8 981.8,833.2 981.9,837 990.4,839.4 993,835.6 1001,834.7 1011,833.5 1013,837.5 1022,830 L 1026,835 1039,816.8 1036,803.4 1045,799.4 1055,783 C 1050,779.8 1045,777.2 1047,771 L 1048,771 1050,773 1061,752 1047,746 C 1050,737.9 1054,732.1 1062,729 L 1060,713 1079,713 1081,707 1077,695 C 1069,695 1065,693.2 1064,685 1049,680.7 1062,663.7 1072,666 1070,657.1 1062,649.8 1064,640 L 1071,643 C 1078,635.1 1081,632.3 1085,622 L 1108,632 C 1107,620.5 1110,611.5 1099,605 L 1099,604 C 1106,596.1 1098,588.2 1099,579 L 1113,577 C 1114,572.2 1119,571.1 1121,566.9 1122,563.3 1120,558.6 1119,555 1118,546.1 1121,541.3 1109,541 1109,534.4 1109,527.8 1117,527 L 1108,511.8 1103,502.2 1075,504 C 1077,495.3 1071,495 1065,492 L 1063,496 1059,495 1060,489 C 1052,487.2 1051,482.3 1050,475 1042,475.1 1039,472.2 1037,481 1033,479 1028,476.5 1026,472 1025,466.7 1029,461.4 1022,459 L 1017,441.3 1021,430 C 1016,427.2 1017,422.2 1013,419.4 1002,412.2 988.8,415.5 976.9,416 972.1,416.2 965.8,414.5 962.9,419 L 956.6,413.8 930.9,412 935.9,384 912.9,385.1 897.9,391 C 896.7,394.9 894.9,395.7 890.9,396 L 884.9,388 885.9,382 C 880.4,381.1 877.8,382.9 875.9,388 L 873.9,388 872.9,385 836.9,383 C 839.1,375.4 840.3,368.6 829.9,371 L 828.9,368 827.9,368 824.9,372 824.9,367 C 820.1,367.9 817.7,367.1 816.9,362 808.9,362.6 807.2,360.8 800.9,356 z"
       id="kujpom"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 558.9,400 C 553.7,403.9 547.6,404.1 544,410 541.1,414.7 542.5,419.9 541,425 538.6,433.8 530.7,440.9 522.9,445.5 517.6,448.6 502.5,450 496.1,450.6 489,451.2 482.9,443.9 480.9,456 L 486.9,474.5 516.9,488.9 531.9,498 531.9,502 C 526.1,502.1 518.3,504.7 515.4,510.3 512.6,516 517.3,523.6 508.9,525 507.8,520 504.7,519.2 499.9,519 L 499.9,522 491.4,533.4 470.2,538.2 463.9,548 465.9,554 460.9,558 460.9,559 C 467,566.3 459.9,572.9 452.9,577 L 454.9,582 C 450.1,582 447.2,581.7 443.9,578 L 414.2,589.9 397.9,588 396.9,583 C 393.7,583.6 384.8,580.8 383,582.8 381,585 381.1,592.2 381,595 380.4,606.9 384.4,618.5 382.4,630 381.2,636.6 383.5,643.4 374.9,644 L 376.9,652 365.9,653 C 366.3,658.3 370.8,658 372.2,662.2 372.9,664.5 371.1,666.6 371.6,668.9 372.5,673.3 375.6,677.2 372.9,681.9 368.8,688.8 346.5,688.6 338.9,691 L 340.9,702 C 332.7,703.3 334.7,713.5 334.9,720 335.3,727.8 341.7,734.8 343.5,742.1 344.3,745.4 341.3,748.3 343.1,751.6 346.2,757.1 355,763.4 348.9,770 L 348.9,772 351.9,773 347.9,783 346.9,783 339.9,772 C 336.4,773.3 334,776 336,780 339.7,787.6 350.3,790.6 354.6,798.4 357.6,803.9 354.6,812.6 356.9,819 343,823 341.5,843.7 344.9,856 339.2,861 350.6,870.4 349.8,876.9 349.2,882.2 344.2,884.9 346.7,891 348.4,895.1 355.6,898.6 358.9,895 365.6,897.7 376.5,907.3 363.9,911 364.1,919 372.2,932.2 381.8,930.4 386.3,929.5 391,924.2 395.8,925.7 399.9,927 401.1,933.4 401.9,937 L 398.9,938 C 401.6,948 396.7,947.7 394.9,956 L 407.9,956 C 409.6,960.4 411.8,960.9 415.9,959 L 416.9,965 429.9,952 C 433.1,955.7 440.6,956.8 444.9,959.5 448.9,961.9 454.3,968.6 457.3,972.3 461.9,978 459.4,983 461.5,988.9 463.3,993.6 471.5,1001 475.4,1004 482.8,1010 495.7,1012 502.3,1019 511.1,1028 501.7,1036 502.2,1045 502.6,1053 523,1055 528.9,1055 529.2,1062 535.6,1077 542.3,1080 545.8,1082 550.2,1080 553.6,1082 562.1,1087 564.7,1097 576.9,1093 L 575.9,1089 C 580.3,1088 582.8,1089 585.9,1092 L 587.9,1092 588.9,1086 598.9,1083 C 602.4,1092 610.1,1083 615.9,1088 620.1,1082 613.4,1072 620,1068 634.8,1058 654.3,1070 667.9,1076 671.6,1077 676.2,1075 679.2,1078 687,1087 701,1109 677.9,1109 L 684.2,1133 687.4,1141 698.9,1139 715.9,1144 717.9,1138 725.9,1140 726.9,1148 C 723.2,1149 719.2,1152 720,1156 720.9,1162 727.3,1167 728.5,1173 729.2,1177 726.4,1181 726,1185 725.6,1190 728.8,1200 731.8,1205 735.5,1210 743.9,1211 747,1216 749.2,1219 745.7,1227 744.9,1231 L 741.9,1230 740.9,1231 C 746.6,1247 788.7,1240 788.9,1225 L 805.9,1222 808.9,1210 C 801.8,1204 811.5,1193 805.9,1184 L 804.9,1184 C 802,1186 796.5,1188 794.1,1184 792.7,1181 794.2,1177 793.6,1174 792.5,1168 788.6,1161 784.9,1157 L 796.9,1154 C 798.8,1145 803.9,1149 809.8,1145 815,1142 812.7,1134 810.9,1129 L 817.9,1124 841.9,1138 C 843.7,1131 849.6,1126 851.5,1119 853.4,1112 850,1105 851,1099 852,1092 855.7,1082 848.9,1078 L 847.9,1068 852.9,1067 853.9,1062 849.9,1052 853.9,1052 853.9,1048 C 864.7,1046 861.6,1026 863.3,1018 864.2,1014 866.1,1010 866.9,1006 L 870.9,1007 880.9,998 882.9,1005 C 895.1,1001 900.9,1005 912.9,1007 915.3,993.3 932.6,986.9 934,973.1 934.5,968.5 926.4,964.9 924.5,960.8 922.5,956.4 924.3,951 921.9,946 930.7,941.5 920.5,932.3 925,925.4 931.4,915.6 948.5,936.9 948.9,917 L 966.9,917 C 966.2,912.5 969.6,908.4 968.6,904.2 967.6,900.4 962.4,900.5 962.3,896 961.9,875.5 981.6,871.9 996.9,879 L 997.9,878 994.9,872 C 999.3,870.5 1004,863.9 998.6,860.2 995.4,858.1 990.5,859.7 986.9,860 L 989.9,840 980.9,838 976.9,825 967.9,818 967.9,824 C 958.4,827.3 951.1,831.5 940.9,833.5 938.5,833.9 935.2,836.7 932.7,835.1 928.8,832.6 928.4,824 925,820.2 920.6,815.4 916.3,814.4 915.9,807 L 909.3,799.2 899.9,795 C 895.5,795.8 893.8,794.4 892.9,790 L 877.9,784 873.9,791 C 869.8,791.3 862.7,794.2 858.9,792.3 853.5,789.7 855.9,776.1 855.9,771 848.9,771.8 837.4,783.5 832.9,789 L 831.9,789 C 829,786.8 826,788.1 822.9,786.5 815.9,782.9 814,779 804.9,779 804.3,773.7 802.2,772.2 796.9,772 L 795.9,761 781.9,760 775.9,763 778.9,753 C 772.5,754.7 770.2,753.1 767.9,747 L 765.9,747 764.9,750 760.9,741 753.9,733 743.9,734 745.9,731 733.9,724 728.9,730 727.9,725 722.9,727 722.9,728 724.9,731 715.9,735 711.9,738 710.9,725 700.9,723 C 702.2,720.4 705.2,714.1 703.8,711.3 700.5,705 684.1,713 681.9,717 L 676.9,713 670.9,714 674.9,708 672.9,699 C 659.3,695.1 656.1,688.6 667.9,680 670.8,683.9 676,683.4 678.3,678.9 680.8,673.9 678.9,667.4 678.9,662 L 681.9,663 C 683.3,655.4 678.3,640.5 671.9,636 L 672.9,634 C 667.4,630.6 661.7,625.5 655.8,623.1 645.4,618.8 641.4,625.9 636.9,612 644.7,606.2 646.1,597 644.9,588 L 649.9,589 648.9,569 654.9,568 654.9,566 646.9,563 646.9,541 C 651.7,540.8 664.8,539.2 667.9,535.4 675.8,526 667.6,517.4 662,510 655.5,501.6 651,492.6 639.9,489 642.5,485.4 646.8,482.7 648.9,478.8 651.4,474.3 649.6,469.4 653.2,465.1 658.5,458.5 667.5,453.7 668.9,445 L 656.9,443 656.9,440 652.9,440 C 650.6,429 632.1,434.7 623.9,433.8 619.8,433.4 615.1,430.9 610.9,431.9 606.1,433.1 604.5,438.2 598.9,437.9 588,437.5 595.6,422.1 581.9,430 580.2,421.8 577.4,414.7 574.2,407 573.1,404.6 572.7,399.6 570.4,398.1 565.6,394.9 564.5,405.9 558.9,400 z"
       id="wielk"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 1451,463 1452,468 1433,474.4 1420,476 1420,472 C 1413,472.7 1406,476.6 1403,483 1386,476.3 1379,505.5 1366,486 L 1346,496 1349,504 1337,505 1333,512 C 1326,509.2 1320,508.5 1313,510 L 1314,514 C 1307,515.1 1306,522.1 1305,528 L 1281,534 1277,536 C 1272,520.3 1242,548.1 1257,557 L 1254,565 C 1248,566.8 1244,570.6 1237,571 1227,571.6 1206,559 1199,571 1189,556.9 1173,574 1160,563.6 1158,561.9 1155,560.2 1153,557.4 1152,555 1155,547 1150,548.3 1146,549.3 1139,554.8 1139,559 1138,562.3 1141,566.7 1138,569.1 1130,573.5 1115,561.2 1114,578 L 1099,581 1103,596 1102,604.8 1108,612.1 1108,633 1085,623 1071,644 1064,641 1067,648 C 1066,654.6 1069,659.8 1074,664 L 1074,665 C 1067,667.2 1047,682 1065,684 1065,694.7 1071,690.2 1076,695.6 1079,698.1 1080,704.7 1082,708 L 1077,714.4 1061,714 1063,730 C 1057,731.2 1045,737.9 1050,745.5 1052,749.3 1059,750.9 1063,752 1059,756.8 1049,767.6 1052,773 L 1047,772 C 1046,777.8 1051,780.4 1056,782 1051,791.9 1046,800 1036,803 L 1044,821 1040,825 1040,826 1047,828 C 1048,843.7 1060,836.7 1070,839.8 1077,841.8 1079,847.1 1080,853 L 1099,857 1099,861 1102,861 1102,867 1117,861.6 1128,863.9 1142,856 C 1144,860.9 1147,859.5 1151,857 L 1151,856 C 1149,845 1161,850.8 1167,851 1167,865.2 1182,861.2 1189,868.7 1193,872.2 1190,876.9 1190,881 1190,885.4 1194,894.4 1197,897.4 1200,900.1 1205,898.4 1209,900.2 1213,902.2 1215,907.5 1219,908.7 1223,909.8 1228,907.8 1231,911.3 1236,915.8 1230,927.8 1226,931.4 1224,933.1 1218,934.6 1219,937.9 1220,944.7 1230,942.7 1233,947.1 1235,950.3 1238,956 1235,959.5 1233,962.2 1227,963.2 1229,967.8 1232,976.4 1247,960.9 1243,976 L 1254,975 1260,971 1262,966 1263,966 C 1267,970.2 1272,965.2 1277,967.5 1284,970.5 1284,977.4 1289,981 1293,983.6 1299,981.1 1303,982.6 1309,985 1320,996.8 1323,1003 L 1312,1003 1312,1005 C 1319,1009 1316,1019 1317,1026 1318,1031 1327,1031 1329,1036 1332,1044 1323,1053 1322,1060 1315,1058 1308,1059 1302,1057 1291,1053 1277,1044 1268,1056 1265,1059 1265,1064 1264,1067 L 1271,1068 1275,1089 1283,1091 C 1282,1096 1277,1109 1281,1113 1288,1121 1298,1104 1299,1119 1299,1120 1300,1122 1299,1123 1298,1130 1290,1141 1285,1146 1282,1148 1277,1149 1275,1152 1273,1157 1274,1164 1275,1169 1282,1171 1293,1171 1294,1179 L 1289,1180 1289,1182 1294,1183 1302,1203 C 1307,1202 1310,1199 1315,1202 1322,1197 1335,1208 1338,1216 1339,1219 1336,1224 1336,1228 1339,1227 1340,1225 1341,1221 L 1352,1227 1352,1228 1350,1230 C 1355,1229 1361,1230 1366,1228 1373,1226 1388,1215 1391,1230 1402,1228 1402,1221 1402,1211 1415,1214 1408,1221 1406,1229 1411,1231 1417,1236 1419,1241 1420,1244 1418,1249 1421,1251 1423,1253 1429,1251 1432,1251 1442,1250 1452,1251 1462,1251 L 1467,1265 1487,1272 1493,1264 C 1492,1250 1516,1265 1517,1250 1521,1251 1526,1250 1529,1252 1536,1256 1542,1263 1551,1262 1549,1256 1554,1254 1555,1249 1556,1245 1554,1240 1555,1235 1555,1232 1558,1228 1558,1225 1558,1219 1549,1219 1551,1212 1553,1203 1564,1187 1561,1178 L 1551,1179 1550,1174 C 1556,1173 1565,1161 1561,1154 1559,1151 1548,1148 1545,1147 1547,1137 1552,1135 1561,1138 1561,1131 1565,1126 1565,1119 1565,1111 1559,1105 1556,1099 1554,1096 1554,1091 1551,1089 1542,1084 1533,1093 1524,1085 1520,1081 1511,1065 1519,1060 1528,1055 1536,1071 1542,1072 1543,1062 1553,1059 1562,1061 1562,1056 1562,1051 1568,1050 L 1574,1039 C 1568,1037 1568,1034 1569,1029 L 1560,1028 1560,1026 1574,1020 1575,1015 C 1585,1013 1593,998.6 1580,994.3 1575,993 1568,1001 1565,993.9 1564,991.2 1573,984.2 1574,980 1577,967.8 1558,958.8 1569,947.4 1575,941.6 1583,943.1 1590,938.9 1594,936.1 1595,930.5 1601,930.3 1608,930.1 1616,934.7 1623,933.6 1628,932.8 1627,925.9 1632,925.5 1637,925.1 1642,930.1 1647,930.4 1652,930.7 1653,921.9 1657,922.6 1662,923.6 1658,932.9 1664,932.3 1670,931.8 1678,927.7 1681,923 1685,916.8 1684,910 1693,909 1694,914.6 1707,925 1712,918.7 1716,913.9 1711,907.2 1713,902 1718,890 1737,897.1 1741,906 1744,905.2 1748,902.7 1751,903.4 1754,904.1 1758,908.4 1762,906.6 1768,903.1 1762,892.1 1775,894 L 1776,893 C 1775,890.7 1772,887.7 1772,885 1772,882.1 1775,880.3 1777,878.6 1785,871.2 1787,871.9 1798,872 1796,868.4 1789,867.4 1788,862.9 1787,858.3 1793,855.3 1796,852.7 1802,846.8 1807,839 1810,831 1805,832.3 1799,836.3 1793,833.6 1790,831.8 1791,826.2 1788,823.4 1785,819.3 1771,814.4 1766,812.7 1760,811 1753,815 1747,815 1740,815.1 1736,811 1729,809.6 1724,808.5 1718,810.7 1713,809.4 1706,807.9 1694,800.1 1691,794 1690,791.3 1691,788 1690,785.6 1688,781.9 1683,781.8 1682,777 1680,772.6 1682,767.5 1680,763.2 1678,756.5 1671,754 1670,746 1665,745.2 1657,737.8 1656,732 1656,728.8 1659,726.2 1659,723 1660,713.2 1657,703.1 1658,693 1658,689.8 1661,684.5 1659,681.6 1657,678.9 1650,677.9 1647,677 L 1648,683 C 1643,683.1 1640,683.9 1639,689 L 1637,689 1628,681.5 1624,671 1622,662.7 1632,659 1625,658 1628,654 1628,652 C 1623,649.3 1612,646.4 1608,650 1602,654 1602,657.6 1595,660.1 1590,661.7 1585,657.7 1582,662 1578,660 1574,658.8 1573,654 L 1569,654 1565,640 1565,639 1571,634 1571,633 C 1568,628.8 1568,621.8 1565,618.6 1563,615.4 1558,616.7 1555,615.4 1543,611.2 1547,603.9 1549,595 L 1556,598 1554,585 C 1552,586.3 1549,589.1 1547,589.7 1540,591.4 1536,577.7 1532,574.8 1527,571.5 1520,577.5 1515,574.4 1506,568.9 1507,563.3 1506,555 1505,550.4 1502,543.5 1500,539 1498,533.5 1493,529.8 1491,524 1501,520.6 1486,513.9 1491,508.6 1494,504.9 1504,507.7 1509,507 L 1502,500 1495,500 1500,489 C 1494,484.2 1489,476.5 1492,469 1487,466.8 1486,464.1 1485,459 1472,460.6 1463,465.8 1451,463 z"
       id="maz"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 1923,495 1924,496 1923,495 M 362.9,554 C 362.8,561.1 359.7,563.4 353.9,567 354.4,572.5 350.6,572.9 345.9,573 L 349.9,581 C 345.2,582.1 340.7,584.3 338.9,589 343.6,594.4 335.2,596.4 330.9,598 L 327.9,593 326.9,593 C 315.3,603 304.2,603 297.9,587 287.2,587.5 276,592.7 267,598.4 263.9,600.3 261.5,605.3 257.8,605.9 254.2,606.5 249.5,603.8 245.9,603 L 244.9,604 251.9,621 C 238.5,624.9 226.1,633.1 212.9,638 206.1,640.5 199.4,642.8 196.9,634 L 186.9,641 C 185.4,632.5 179.1,628.7 171.9,625 L 168.9,633 173.9,634 C 172.2,638.9 169.6,638.7 164.9,638 L 161.9,643 C 164,657.3 154.6,654.5 149.1,664.1 146.6,668.4 148.4,674.3 147.7,679 146.9,684.4 137.6,699.1 132.9,701.6 122.6,706.9 116.1,687.2 108.9,700 100.2,696.8 92.24,694.1 87.92,705 94.17,709.3 105.9,715.9 107.2,724 108,729.4 105.3,734.7 105.1,740 104.9,745.3 106.4,749.1 103.5,754 97.04,765.3 83.61,772.9 85.18,788 85.65,792.6 88.8,796.6 90,801 91.74,807.5 89.87,816.1 94.58,821.5 99.68,827.3 111.8,828.5 113.6,837 115.3,845.5 111.9,858.9 111.9,868 111.9,872.5 111,878 114.9,881 L 113.9,883 121.9,887 C 116.9,904.1 121.3,924.7 113.8,941 110.8,947.6 103.7,956.6 98.82,962 95.56,965.6 90.42,968.8 90.05,974 89.63,980 94.88,983.8 96.79,989 99.43,996.2 96.2,1005 100.8,1012 104.8,1018 112.9,1018 115.3,1026 117.7,1034 118.6,1047 114.6,1054 112.4,1058 105.9,1060 105.4,1065 104.6,1073 114.7,1076 119.9,1079 124.3,1081 126,1086 130,1089 134.8,1092 140.2,1091 144.9,1095 148.9,1098 160.8,1107 152.9,1111 155.3,1118 150.7,1131 160.9,1133 161.8,1124 165.7,1124 173.9,1124 175.3,1116 179.9,1117 185.3,1112 191.6,1107 195,1100 203.9,1100 L 203.9,1106 212.9,1104 C 215.4,1110 221.2,1115 226.9,1117 227.3,1110 229.6,1097 237.9,1097 L 240.9,1076 244.9,1079 262.9,1078 263.9,1078 C 269.8,1086 285.7,1094 283.9,1105 L 296.9,1095 C 298.6,1089 299.5,1083 306.9,1082 307.6,1079 306.2,1072 308,1069 311,1065 324.1,1066 328.9,1066 L 335.9,1025 C 343.2,1023 349.1,1014 355.3,1010 357.9,1008 361.2,1009 363.6,1006 368.8,1002 365.6,996.2 374.9,998 374.1,995.4 369.2,992.3 369.7,989.7 370.9,983.8 382.7,986.8 381.9,994 392,994.3 398.4,1006 409.9,1001 L 405.9,1020 C 419.5,1018 416.2,1025 410.9,1033 L 426.9,1043 C 430,1029 441.2,1025 448.6,1014 451.2,1010 450.2,1007 451.7,1003 453.5,998.3 458.1,994.9 461.9,992 460,987.3 461.4,982.7 459.6,978 453.7,962.8 440.5,960 427.9,953 L 415.9,966 414.9,961 C 410.7,961.5 409.3,960.5 406.9,957 L 393.9,957 400.1,947.1 397.9,937 400.9,936 397.9,926 C 391.3,926.2 384.2,932.7 377.9,930.9 374.3,929.8 372.5,926.4 369.7,924.2 366.5,921.7 363.4,919.5 363.4,915 363.3,909.4 371.7,907.9 367.9,901.1 364.1,894.2 338,899 346.1,883.1 347,881.2 348.4,880.3 349.9,879 348.9,871.9 343.7,866.5 342.4,860 341.7,856.1 343.5,851.9 343.6,848 343.8,834.4 343.4,825.4 355.9,818 L 353,797 332.9,775 340.9,771 C 341.2,776.5 343.5,778.2 347.9,781 L 350.9,774 347.9,773 350.9,769 C 349.8,760.8 344.7,757.7 342.1,750.9 340.9,747.8 343.7,745.2 343.1,742.2 341.7,735.4 335.2,728.9 334.1,722 332.9,714.6 332.5,704.6 339.9,701 L 337.9,690 362.9,685.1 371.9,682.4 370.8,661.5 365.9,654 375.9,651 373.9,644 380.9,643 380.9,581 C 391.2,578 389.1,564.3 387.9,557 L 362.9,554 z"
       id="lubus"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 1039,818 C 1033,823.6 1027,827.5 1027,836 L 1021,832 C 1018,833.6 1015,836.4 1012,836.7 1006,837.4 1001,833.5 995.4,837 988.4,841.1 988.6,851.9 987.9,859 997.3,857.8 1008,863.3 996.9,872 L 997.9,880 C 982.8,873 964.3,874.8 963.2,895 962.9,900.1 968.7,900.5 969.5,905 970.3,909.2 967,912.5 967.9,917 L 949.9,918 C 948.3,936.8 933.8,918 926.5,924.8 922.4,928.6 926.5,936.3 926.6,940.8 927,954 920.4,964.1 936.9,971 934.3,975.1 932.7,980.5 930,984.1 924.2,992.1 914.5,996.8 913.9,1008 901.3,1006 894.9,1001 881.9,1006 L 880.9,1000 867.9,1007 864.3,1027 861.9,1045 850.9,1053 C 851,1059 856.9,1066 848.9,1068 L 849.9,1078 C 856.4,1082 852.6,1092 851.5,1099 850.8,1104 853.2,1110 852.9,1115 852.5,1121 844.3,1136 838.9,1139 834.1,1129 821.2,1127 811.9,1129 813.3,1134 815.6,1140 811.4,1145 805.1,1151 799.3,1145 796.9,1156 L 786.9,1157 786.9,1159 C 794.5,1167 792.6,1177 794.9,1186 L 804.9,1183 805.9,1183 C 807.7,1186 809.8,1189 809.6,1193 809.4,1199 802.4,1206 809.9,1209 L 806.9,1223 829,1230 847.9,1232 871.9,1238 874.9,1247 C 879.9,1242 881.9,1239 879.9,1232 891,1231 891.4,1239 892.9,1248 901.6,1248 901.6,1258 908.9,1258 912.9,1258 914.7,1254 918.1,1253 920.9,1252 924,1253 926.9,1252 936.7,1251 944.1,1248 952.9,1253 L 958.9,1241 984.9,1261 985.5,1266 1005,1272 1020,1278 1029,1265 1043,1264 C 1038,1273 1045,1273 1047,1281 1060,1278 1058,1287 1064,1296 1071,1306 1075,1308 1075,1321 L 1093,1314 1110,1322 C 1112,1339 1119,1332 1132,1332 L 1149,1308 1149,1293 1158,1270 C 1162,1274 1167,1275 1171,1278 1178,1285 1178,1293 1190,1294 L 1194,1262 1181,1260 C 1183,1253 1179,1246 1181,1240 1182,1236 1187,1234 1188,1231 1189,1227 1183,1224 1187,1220 1193,1216 1200,1219 1206,1220 1214,1220 1224,1218 1230,1213 L 1231,1213 1233,1216 1234,1216 1241,1209 1236,1198 C 1245,1202 1255,1194 1259,1203 L 1264,1201 1262,1194 1265,1193 C 1263,1189 1257,1182 1262,1178 1266,1175 1271,1176 1273,1171 1275,1165 1271,1159 1274,1153 1277,1148 1283,1148 1286,1144 1295,1134 1297,1126 1299,1113 1293,1112 1288,1118 1282,1115 1275,1110 1282,1100 1281,1094 1281,1090 1276,1090 1275,1087 1272,1082 1271,1074 1270,1069 L 1263,1068 C 1264,1064 1264,1059 1267,1056 1277,1043 1290,1053 1302,1056 1308,1058 1315,1058 1321,1059 1324,1053 1332,1042 1327,1035 1325,1031 1318,1030 1317,1026 1315,1019 1318,1009 1311,1005 L 1311,1003 1322,1002 C 1319,996.4 1309,984.9 1303,983.3 1299,982.3 1293,984.5 1289,982 1284,978.1 1277,958.2 1267,971 L 1266,971 1262,967 1261,972 1254,976 1242,976 1244,969 1226,969 C 1228,963.7 1230,961.6 1236,960 1236,955.5 1236,949 1231,946.1 1228,943.7 1218,943.3 1218,937.1 1218,934 1223,933 1225,931.4 1228,928.7 1234,916.1 1232,912.3 1229,908.3 1223,910.9 1219,909.4 1215,907.8 1213,902.9 1209,900.9 1205,899.1 1200,901 1197,897.4 1194,894.4 1189,885.1 1189,881 1189,876.8 1192,872.2 1189,868.7 1181,861.7 1168,865.4 1166,852 L 1158,848 C 1154,849.3 1151,850.8 1150,855 L 1152,855 C 1150,859.2 1146,861.8 1142,858 1137,859.5 1133,864.5 1127,864.8 1123,865 1120,861.8 1117,862.2 1114,862.5 1112,865.6 1110,866.8 1103,870.3 1100,863.2 1098,858 L 1083,857 1083,854 1079,854 C 1077,831.5 1051,849.1 1046,829 1038,827.5 1043,822.7 1039,818 z"
       id="lodz"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 1810,832 C 1807,839.5 1803,846.2 1797,851.9 1794,854.5 1788,857.6 1789,862 1789,866.6 1795,868.5 1799,870 L 1798,874 C 1789,871.2 1775,872.7 1773,884.1 1772,887.8 1776,891.2 1776,895 1772,894.3 1768,893.8 1766,897.3 1764,900.6 1766,907.3 1760,907.5 1756,907.6 1754,904 1750,903.8 1747,903.6 1745,906.1 1742,905.4 1735,903.7 1721,887.2 1714,901.1 1712,905 1715,909.9 1714,914 1714,917.3 1712,920.1 1711,923 1706,920.7 1701,918.5 1696,915.1 1694,913.6 1692,910.2 1689,910.6 1685,911.2 1684,918 1682,921 1680,925.8 1668,936.5 1661,932.2 1658,930.3 1659,925.1 1658,922 L 1655,922 C 1649,935.7 1641,928 1630,925 1625,941.6 1612,929.4 1600,930.9 1595,931.5 1593,936.6 1590,939.3 1583,944 1573,941.6 1568,949.2 1561,961.5 1578,969.2 1574,982 1573,985.4 1564,991.8 1566,994.4 1569,998.3 1575,994.3 1578,994 1582,993.7 1586,999.6 1588,1003 1590,1010 1576,1015 1575,1021 1569,1021 1564,1023 1561,1028 L 1570,1028 C 1569,1034 1568,1037 1575,1038 L 1570,1050 C 1562,1052 1562,1055 1563,1062 1557,1061 1551,1060 1546,1064 1544,1066 1543,1072 1540,1072 1537,1073 1536,1068 1534,1067 1532,1064 1525,1060 1521,1060 1511,1062 1521,1082 1525,1085 1533,1091 1542,1084 1550,1088 1555,1091 1554,1096 1557,1100 1564,1111 1571,1129 1558,1140 1554,1131 1547,1141 1546,1146 L 1562,1155 1558,1173 1552,1178 1561,1177 1564,1184 C 1556,1188 1551,1209 1551,1218 1556,1220 1558,1222 1560,1227 1550,1233 1558,1249 1559,1257 1560,1261 1558,1265 1558,1269 1559,1273 1563,1277 1564,1281 1566,1291 1564,1303 1566,1313 1567,1317 1570,1319 1571,1322 1574,1330 1572,1339 1581,1344 1590,1348 1600,1346 1608,1340 1611,1338 1614,1333 1618,1332 1623,1330 1629,1334 1633,1336 1635,1337 1638,1337 1640,1339 1642,1340 1650,1350 1650,1352 1651,1360 1640,1373 1638,1381 1644,1381 1649,1381 1653,1386 1655,1388 1655,1391 1657,1393 1662,1396 1668,1395 1673,1397 1685,1400 1688,1407 1700,1404 L 1704,1410 C 1711,1407 1714,1414 1709,1419 L 1709,1424 C 1712,1427 1712,1429 1711,1433 1720,1433 1720,1434 1716,1441 L 1725,1440 C 1717,1455 1709,1451 1696,1448 L 1700,1458 1688,1463 1686,1469 C 1696,1468 1695,1473 1700,1480 1703,1482 1706,1483 1709,1485 L 1710,1485 C 1718,1480 1729,1481 1738,1480 1740,1480 1747,1479 1746,1483 1745,1491 1732,1486 1732,1496 1739,1498 1745,1501 1752,1502 1766,1502 1781,1499 1795,1499 1803,1500 1811,1504 1820,1500 1828,1497 1835,1484 1840,1477 1842,1474 1846,1469 1850,1469 1854,1469 1860,1474 1864,1477 L 1865,1477 1882,1464 C 1886,1472 1889,1478 1899,1480 L 1894,1493 1913,1495 1916,1503 1924,1511 C 1938,1508 1939,1494 1947,1485 1952,1480 1958,1478 1962,1472 1965,1466 1963,1460 1969,1456 1984,1444 2012,1452 2025,1438 2038,1424 2038,1402 2038,1385 2038,1380 2039,1374 2038,1369 2038,1364 2034,1361 2033,1357 2032,1353 2039,1351 2037,1347 2036,1343 2029,1346 2026,1343 2023,1340 2025,1334 2023,1330 2020,1326 2014,1326 2013,1321 2012,1313 2022,1303 2029,1301 2033,1299 2042,1303 2040,1296 2038,1285 2022,1288 2016,1279 2011,1268 2003,1257 1999,1246 1996,1239 1996,1229 1993,1223 1990,1219 1984,1218 1981,1213 1979,1209 1982,1203 1979,1198 1973,1190 1961,1184 1954,1176 1950,1171 1954,1163 1950,1159 1945,1153 1936,1156 1933,1147 1928,1136 1942,1121 1938,1108 1937,1104 1934,1102 1933,1099 1932,1095 1934,1091 1932,1088 1930,1085 1926,1087 1923,1085 1920,1083 1920,1078 1918,1076 1916,1073 1911,1074 1909,1071 1906,1066 1905,1054 1903,1048 1902,1040 1907,1034 1907,1026 1906,1020 1900,1012 1903,1006 1906,999.7 1916,998.1 1917,991 1918,981.5 1911,973 1909,964 1921,959.5 1911,955.4 1914,946 1916,939.5 1921,935.1 1923,929 1925,922.8 1923,912 1921,906 1916,895.3 1913,880.3 1899,889 1896,880.9 1889,880.9 1884,875 1880,869.6 1882,864.8 1874,862 1870,867 1866,864.8 1864,859 L 1854,857.2 1848,859.3 1842,852.8 1835,855.4 1823,855 1823,840 1812,832 1810,832 z"
       id="lub"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 374.9,999 367.9,997 C 365.7,1004 363.7,1010 354.9,1009 L 351.9,1017 C 348.1,1016 345.9,1017 345.9,1021 L 336.9,1026 329.9,1067 307.9,1068 306.9,1083 302.9,1082 297.9,1096 C 289.9,1095 290.7,1105 282.9,1106 285.4,1093 267.7,1083 256.9,1079 253.7,1078 243.4,1077 240.8,1080 236.9,1083 238.8,1094 239.9,1099 229.7,1096 228,1110 227.9,1118 217.2,1115 215.5,1106 202.9,1107 L 202.9,1101 C 194.1,1101 191.3,1108 185.3,1113 179.7,1118 175.4,1116 174.9,1125 166.4,1125 162.1,1124 161.9,1134 L 154.9,1133 C 151.7,1145 169,1154 166.8,1164 163.4,1179 156.5,1194 151.1,1209 149,1215 149.7,1221 147.8,1226 143,1240 136.9,1255 132.5,1269 130.9,1274 124.7,1275 121,1278 114.8,1284 114.2,1292 115.9,1299 127.2,1299 142.2,1304 152.9,1299 152,1295 149.8,1291 150.3,1287 151.2,1279 163.3,1260 146.9,1263 147.1,1261 147.3,1259 148.5,1257 158.2,1242 166.8,1258 177.9,1260 181.3,1261 182.9,1257 186,1257 189.2,1256 192.9,1260 195.9,1261 200.4,1253 211.8,1263 213.4,1269 215.1,1276 209.3,1282 210.1,1289 211.2,1298 225.1,1304 228.3,1313 229.8,1317 227.2,1324 230.8,1327 234.5,1331 238.9,1322 243.9,1324 261.6,1331 277.2,1341 294.9,1347 302.2,1349 308.8,1341 315.9,1346 324.2,1353 326.1,1368 330.9,1377 336.5,1375 346.9,1369 350.3,1377 352.1,1381 346,1391 352,1393 362.9,1395 361.8,1378 371.9,1376 381.8,1375 384.8,1387 394.9,1387 394.1,1384 391.7,1380 392.6,1377 394.5,1371 406.5,1373 410.9,1374 418.6,1377 439,1395 439.9,1404 440.2,1407 437.4,1409 436.4,1412 433.9,1419 430.1,1425 423.9,1429 420.8,1431 417.3,1430 414,1432 402.1,1436 389.1,1448 393.6,1462 397.6,1475 412.4,1472 419,1482 421.8,1486 420.8,1491 422.8,1496 424.5,1500 428.7,1500 431.3,1503 434.2,1507 434.7,1511 437.5,1515 442.9,1522 453,1526 456.9,1534 459.6,1539 456.8,1546 458.2,1552 460.4,1560 478,1577 486.9,1577 501.5,1577 508.2,1553 517.5,1545 527.5,1537 543.1,1544 545.9,1529 549.7,1531 552.3,1541 555.9,1541 560.6,1541 559.3,1522 558.7,1519 557.1,1510 547.4,1509 542.5,1503 539.7,1499 541.6,1494 540.1,1490 537.9,1484 532.4,1480 531.5,1474 530.1,1464 540.2,1459 545,1451 546.7,1449 546.8,1445 549.4,1443 551.7,1441 553.3,1442 554.9,1444 L 562.9,1446 567.9,1444 C 566.9,1438 569.2,1437 570.9,1432 571.9,1429 570.2,1426 570.9,1423 572,1418 575.7,1414 577.9,1410 579.5,1407 579.4,1401 583.1,1400 590,1397 599,1408 606.3,1402 611.4,1398 604.4,1388 611.9,1383 L 611.9,1381 C 608.2,1378 607.1,1376 606.9,1371 621.5,1369 609.9,1357 615,1349 619.6,1342 626.3,1350 631.1,1346 634.3,1343 627.5,1334 628.1,1330 629.2,1322 652.7,1316 634.9,1308 L 638.9,1298 651.9,1302 C 651.9,1288 653.6,1282 668.9,1284 L 666.9,1279 674.9,1278 C 673.6,1271 671.4,1260 675.8,1254 678.4,1250 684.7,1252 685.8,1247 686.7,1243 687.6,1236 686.6,1232 685.9,1229 682.4,1227 683.3,1224 684.9,1218 693.1,1219 694.9,1213 L 714.9,1220 714.9,1217 736.9,1212 C 733,1204 726.5,1198 725.2,1188 724.4,1182 729.2,1177 727.2,1171 724.8,1164 713.2,1151 725.9,1147 L 725.9,1141 721.9,1143 717.9,1139 716.9,1145 698.9,1140 687.2,1142 683.2,1132 676.9,1109 C 679.7,1108 683.3,1108 685.7,1107 698.5,1099 684.7,1084 678.3,1079 675.7,1076 671.1,1078 667.9,1076 655.6,1071 632.4,1059 619.4,1069 615.5,1072 618.8,1084 616.9,1089 611.4,1085 609.7,1089 603.9,1088 596.8,1088 591.4,1082 588.9,1093 L 576.9,1090 C 576.1,1097 565.7,1095 561.4,1091 558.5,1089 557.2,1085 553.8,1083 550.2,1081 545.7,1083 542.1,1081 535.4,1077 528.9,1063 527.9,1056 L 507.9,1053 507.9,1050 499.9,1048 506.2,1032 502.9,1018 C 495.6,1017 491.3,1012 484.9,1009 481.8,1007 478,1007 475.2,1005 471.5,1001 468.6,993.7 462.9,993.3 458.7,992.9 454,998.5 452.7,1002 451.2,1006 452.2,1009 449.6,1013 441.9,1024 429.4,1029 427.9,1044 L 409.9,1034 415.9,1020 404.9,1021 409.9,1003 C 397.6,1004 391.8,996.7 380.9,994 L 381.9,988 C 379.8,988 369.1,986.8 370.4,991 371.5,994.4 374.7,994.9 374.9,999 z"
       id="dolno"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 1275,1170 C 1271,1175 1265,1175 1262,1179 1258,1182 1264,1190 1266,1193 L 1263,1194 1265,1202 1254,1198 1237,1199 1243,1209 1234,1217 1233,1217 C 1227,1213 1219,1220 1213,1221 1205,1222 1195,1216 1188,1220 1183,1223 1190,1227 1189,1231 1188,1235 1183,1236 1182,1240 1180,1246 1184,1253 1182,1260 L 1196,1261 C 1194,1269 1194,1277 1192,1285 1191,1287 1192,1291 1189,1293 1181,1300 1174,1281 1171,1279 1167,1275 1162,1275 1159,1271 L 1158,1271 1150,1292 1150,1309 1133,1332 C 1143,1333 1147,1340 1146,1349 L 1137,1346 1136,1358 C 1129,1362 1128,1366 1119,1365 L 1124,1373 1123,1380 1134,1382 1155,1386 C 1155,1391 1150,1392 1149,1396 1147,1403 1160,1402 1163,1400 1163,1405 1163,1411 1158,1414 1155,1415 1152,1415 1150,1417 1145,1424 1145,1430 1137,1433 1139,1438 1154,1446 1160,1446 1164,1445 1166,1440 1171,1440 1175,1440 1189,1442 1193,1444 1196,1446 1197,1450 1202,1451 1208,1452 1213,1448 1219,1449 1224,1449 1232,1454 1236,1456 1241,1460 1237,1465 1239,1469 1244,1479 1263,1493 1243,1498 L 1243,1506 C 1254,1510 1259,1514 1254,1525 L 1258,1533 1266,1535 1266,1537 1259,1542 1267,1543 C 1270,1561 1290,1545 1298,1543 1302,1542 1306,1545 1310,1544 1315,1541 1321,1536 1327,1535 1332,1534 1335,1537 1340,1534 1346,1530 1347,1521 1354,1519 1358,1517 1361,1519 1365,1518 1369,1517 1371,1514 1375,1512 1385,1509 1396,1509 1406,1507 1418,1505 1426,1494 1438,1499 1449,1480 1471,1471 1488,1458 1493,1454 1493,1447 1499,1443 1508,1437 1519,1436 1527,1429 1537,1419 1538,1402 1545,1391 1549,1384 1566,1396 1562,1381 1571,1377 1569,1361 1572,1352 1574,1342 1574,1331 1570,1321 1569,1318 1566,1316 1565,1312 1563,1302 1564,1291 1563,1281 1562,1276 1558,1273 1557,1268 1557,1262 1559,1258 1557,1251 1554,1252 1547,1258 1553,1259 1545,1268 1537,1256 1529,1253 1526,1251 1521,1252 1518,1251 L 1518,1256 C 1511,1257 1491,1255 1495,1265 L 1491,1265 C 1491,1272 1485,1273 1479,1270 1469,1266 1466,1262 1461,1252 1451,1252 1442,1252 1432,1252 1428,1252 1424,1254 1420,1251 1417,1249 1419,1245 1419,1241 1417,1236 1410,1231 1405,1230 1407,1223 1415,1214 1403,1212 1403,1224 1401,1227 1390,1232 1390,1226 1385,1221 1378,1222 1374,1223 1371,1227 1368,1228 1362,1231 1355,1231 1349,1230 1351,1218 1339,1229 1337,1227 1334,1225 1338,1219 1337,1216 1335,1209 1326,1207 1324,1200 L 1317,1203 C 1311,1200 1308,1202 1302,1205 L 1293,1184 C 1289,1183 1289,1180 1293,1178 1292,1171 1281,1171 1275,1170 z"
       id="swieto"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 695.9,1214 694.9,1219 C 691.5,1219 684.8,1220 683.7,1224 682.8,1227 686.9,1229 687.6,1232 688.5,1236 687.5,1244 686.3,1248 684.7,1252 679.3,1251 676.8,1254 671.4,1260 674.6,1272 675.9,1279 L 667.9,1279 669.9,1284 C 654,1286 652.9,1286 652.9,1303 L 639.9,1299 635.9,1306 635.9,1307 C 642.8,1313 641.1,1315 639.9,1323 621.7,1325 633.5,1336 632.9,1348 627.9,1348 619.8,1345 616,1349 609.2,1356 623,1368 607.9,1372 608.1,1377 609.2,1379 613.9,1381 L 605.8,1403 581.9,1402 568.3,1436 562.9,1447 C 556.2,1438 539.7,1448 545.6,1457 555.6,1472 578.5,1478 593.8,1485 599.7,1487 601,1496 606,1500 612.1,1506 619.5,1503 625.8,1507 632.6,1511 625.2,1521 630.5,1525 634.6,1528 637.3,1515 642.5,1516 649,1516 645.2,1525 646.6,1529 648.7,1534 652.4,1527 652.9,1525 661.5,1525 670.2,1524 678.5,1524 681.9,1524 684.4,1526 687.9,1525 694.3,1523 702.7,1510 708.9,1512 711,1513 713.6,1515 714,1517 714.6,1520 712.3,1523 712,1526 711.4,1534 715.2,1541 710.4,1548 706.3,1554 700.8,1557 693.9,1559 689.8,1559 682.5,1558 679.6,1561 676.4,1566 683.1,1572 685.6,1575 687.7,1577 689.7,1580 691.9,1582 L 692.9,1582 C 698.2,1578 704.3,1580 708.5,1585 711.3,1589 710.5,1595 712.3,1599 714.9,1605 719.5,1606 723.2,1610 726.3,1614 726.7,1618 730.9,1621 745,1631 746.8,1618 757.9,1614 763,1612 769.3,1618 773.4,1614 779.4,1609 767.3,1607 768.3,1601 769,1598 773.5,1597 775.4,1594 778.8,1589 779,1584 779.9,1578 L 778.9,1570 774.9,1568 C 780.5,1563 790.9,1568 791.9,1562 L 797.9,1563 798.9,1560 C 802.4,1561 813.6,1562 816.2,1559 819.2,1556 815.5,1552 820,1550 826.9,1546 838.4,1544 839.9,1535 L 844.9,1539 853.9,1539 855.9,1531 C 849.6,1528 849.8,1523 846.9,1517 853.7,1512 842.9,1504 842.9,1497 L 845.9,1497 C 847,1488 845.1,1486 841.9,1478 849.9,1476 848.5,1458 847.9,1451 L 862.9,1452 C 863.7,1455 864.5,1456 867.9,1457 867.8,1448 857.8,1441 859.8,1432 861.8,1423 877,1429 882.9,1429 887.4,1428 891.4,1426 895.9,1426 896.6,1421 895,1408 890.8,1405 887,1402 880.7,1402 877.9,1398 873.9,1392 875.3,1381 868.9,1376 L 883.9,1360 877.9,1348 880.8,1334 894.4,1322 900.1,1302 898.3,1292 904.9,1271 C 921.2,1268 900.5,1249 891.9,1249 891.7,1245 890.5,1230 884.2,1233 882.2,1233 877.7,1245 876.9,1248 L 870.9,1239 847.9,1232 828.9,1230 818.9,1224 789.9,1226 C 789.2,1235 781.4,1235 773.9,1237 762,1240 745.3,1245 739.9,1230 L 743.9,1230 C 744.8,1228 745.4,1225 745.9,1223 750.3,1201 718.3,1221 709.9,1221 704.6,1221 700.6,1216 695.9,1214 z"
       id="opol"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 958.9,1242 952.9,1254 951.9,1254 C 944.8,1246 918.3,1253 910.9,1259 913.1,1270 904.1,1279 899.9,1289 897.8,1294 900.9,1298 901,1302 901,1307 898.5,1313 896.9,1317 893,1328 874.1,1333 878.7,1348 880.2,1353 884.7,1356 886.9,1361 L 885.9,1362 883.9,1361 869.9,1376 C 875.8,1380 875,1392 878.4,1398 880.9,1402 888.2,1402 891.8,1405 895.2,1409 893.5,1412 895,1416 896.3,1419 898.9,1423 894.6,1426 885.4,1432 868.2,1423 861.5,1430 855.7,1436 866.2,1445 868,1450 868.8,1452 869.1,1457 865.9,1457 863,1457 860.4,1453 856.9,1453 854.2,1453 851.6,1452 848.9,1452 849.3,1460 850.5,1475 842.9,1479 L 849.9,1487 846.9,1498 843.9,1498 C 843.2,1505 854,1511 847.9,1517 851,1526 855.8,1531 854.9,1540 L 843.9,1540 840.9,1536 C 837.8,1545 825,1549 816.9,1551 L 815.9,1563 792.9,1563 788.9,1568 783.9,1564 775.9,1566 C 782.4,1577 778.9,1586 774.9,1597 787.6,1601 782.3,1610 790.4,1617 795.8,1622 800.5,1617 805.7,1618 808.7,1619 809.7,1624 811.6,1626 815.9,1631 821.6,1633 823.9,1640 829,1640 832.3,1640 834.9,1635 L 856.8,1640 866.9,1648 885.9,1643 881.9,1658 C 892.7,1665 884.4,1668 885.1,1678 885.8,1688 888.6,1699 894.3,1708 898,1713 909.6,1722 915.9,1723 921.2,1725 927.3,1723 931.4,1727 934.6,1731 934.7,1738 935.7,1743 937.4,1751 941.3,1758 942.6,1766 943.3,1770 941.7,1776 944,1780 948.2,1787 959.1,1780 964.5,1785 969.3,1789 970.3,1803 969.9,1809 969.7,1814 968.9,1820 974.9,1821 980.1,1821 984.1,1816 988.9,1816 997.5,1814 1009,1822 1016,1813 1022,1805 1020,1793 1027,1786 1035,1778 1045,1776 1054,1769 1061,1762 1071,1746 1082,1746 L 1085,1739 C 1079,1736 1067,1735 1064,1729 1070,1726 1080,1714 1074,1707 1069,1701 1054,1705 1047,1701 1044,1699 1038,1694 1037,1690 1036,1686 1040,1682 1036,1679 1031,1674 1021,1680 1015,1675 1013,1674 1012,1672 1012,1669 1015,1657 1014,1649 1014,1637 1006,1638 998.9,1645 993.9,1635 1004,1633 999.5,1622 1002,1615 1005,1608 1011,1605 1015,1599 1018,1594 1019,1586 1022,1580 1025,1574 1030,1574 1030,1567 L 1046,1565 C 1047,1555 1056,1543 1065,1540 L 1043,1524 C 1056,1520 1058,1514 1067,1505 1070,1503 1074,1503 1076,1500 1078,1496 1075,1493 1078,1490 1077,1485 1076,1479 1082,1476 1087,1474 1095,1480 1101,1479 1107,1478 1111,1474 1117,1472 1121,1471 1124,1473 1128,1472 1131,1472 1133,1469 1136,1469 1139,1470 1141,1472 1144,1472 1148,1471 1152,1469 1156,1469 L 1155,1463 1170,1461 1163,1447 C 1159,1447 1156,1445 1152,1443 1148,1441 1140,1440 1138,1436 1136,1432 1143,1429 1145,1427 1147,1424 1147,1419 1150,1416 1156,1411 1164,1413 1162,1402 1158,1403 1146,1403 1148,1396 1150,1392 1154,1391 1155,1387 L 1136,1382 1121,1382 C 1122,1373 1121,1372 1118,1364 1122,1364 1126,1366 1129,1363 1137,1357 1131,1345 1145,1347 1152,1326 1122,1338 1114,1334 1109,1333 1111,1328 1109,1325 1104,1317 1084,1310 1080,1322 L 1074,1322 C 1074,1316 1075,1309 1072,1304 1069,1300 1064,1298 1062,1293 1059,1288 1056,1276 1049,1283 L 1048,1283 C 1044,1275 1039,1273 1041,1264 1037,1264 1032,1263 1028,1266 1025,1268 1026,1273 1024,1276 1019,1282 1009,1278 1006,1272 999.6,1273 983.2,1269 983.9,1261 L 958.9,1242 M 1061,1289 1062,1290 1061,1289 z"
       id="slaskie"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 1575,1340 1570,1373 1564,1389 C 1555,1392 1542,1385 1545,1400 L 1543,1405 1527,1429 1498,1444 1489,1458 1466,1472 1444,1491 C 1445,1494 1446,1499 1444,1502 1442,1508 1426,1518 1438,1524 L 1438,1526 1432,1528 C 1440,1540 1434,1547 1433,1560 L 1439,1563 1435,1563 1435,1565 1442,1565 1440,1568 1440,1569 1443,1576 1437,1579 C 1441,1582 1435,1585 1436,1589 1436,1592 1441,1593 1441,1597 1441,1601 1437,1602 1435,1605 1432,1610 1434,1620 1437,1624 1442,1631 1462,1626 1462,1636 1463,1644 1453,1644 1448,1644 1447,1652 1435,1654 1428,1654 L 1434,1666 1436,1676 1449,1677 1457,1683 1469,1686 1478,1722 1471,1740 1480,1750 1479,1758 1494,1775 1486,1778 1486,1779 C 1490,1784 1489,1793 1488,1799 1495,1802 1500,1804 1507,1804 1516,1804 1525,1798 1534,1797 1549,1795 1568,1807 1572,1822 1577,1820 1578,1813 1584,1813 1588,1813 1591,1816 1595,1817 1608,1823 1611,1827 1620,1838 1623,1841 1627,1843 1629,1847 1632,1854 1628,1863 1636,1867 1643,1871 1653,1876 1661,1877 1665,1877 1669,1874 1673,1875 1677,1877 1673,1883 1677,1885 1686,1891 1693,1884 1701,1886 1708,1888 1708,1897 1714,1899 1726,1904 1740,1899 1751,1904 1757,1906 1758,1913 1764,1915 1772,1918 1781,1913 1789,1916 1795,1918 1800,1926 1808,1926 1815,1925 1811,1913 1810,1909 1810,1897 1797,1877 1784,1879 L 1785,1872 1776,1875 C 1776,1870 1782,1861 1774,1860 1774,1853 1778,1849 1778,1842 1779,1825 1775,1808 1771,1792 1769,1784 1767,1776 1764,1769 1762,1765 1757,1760 1757,1755 1758,1749 1766,1743 1769,1738 1776,1729 1779,1716 1786,1707 1789,1704 1793,1702 1796,1698 1806,1685 1812,1668 1822,1654 1836,1633 1852,1612 1866,1591 1868,1587 1868,1583 1871,1579 1873,1576 1877,1575 1879,1572 1889,1561 1898,1547 1908,1534 1912,1528 1920,1521 1923,1514 1925,1507 1919,1505 1914,1505 L 1913,1496 1893,1494 1897,1480 1892,1480 C 1891,1476 1889,1476 1885,1476 L 1882,1465 1865,1478 1864,1478 C 1861,1475 1854,1469 1849,1469 1845,1470 1842,1474 1840,1477 1834,1485 1825,1494 1821,1503 1815,1501 1811,1503 1806,1503 1793,1502 1781,1500 1768,1500 1762,1500 1757,1503 1752,1502 1747,1502 1731,1499 1731,1493 1731,1486 1745,1488 1747,1481 1734,1481 1720,1481 1708,1486 1702,1478 1695,1471 1685,1469 L 1687,1462 C 1691,1462 1697,1462 1697,1457 1697,1454 1694,1451 1697,1449 1699,1447 1704,1451 1707,1451 1716,1452 1719,1448 1724,1441 L 1715,1441 1715,1439 1720,1433 1711,1435 C 1711,1430 1713,1427 1708,1424 L 1708,1419 C 1712,1416 1711,1412 1709,1408 L 1703,1411 1699,1405 C 1687,1408 1685,1401 1674,1398 1668,1396 1662,1397 1657,1394 1654,1392 1654,1388 1652,1385 1648,1381 1642,1382 1637,1382 1640,1373 1648,1364 1649,1354 1650,1349 1646,1348 1643,1346 1637,1339 1632,1334 1621,1332 1614,1332 1609,1340 1604,1343 1593,1350 1585,1346 1575,1340 z"
       id="podkar"
	onclick="wojewod(this.id)"
       />
    <path
       d="M 1171,1462 1156,1464 1147,1474 C 1138,1471 1125,1470 1115,1474 1109,1476 1106,1479 1099,1480 1093,1480 1088,1475 1083,1477 1077,1479 1076,1486 1081,1489 L 1081,1490 C 1076,1492 1079,1496 1076,1500 1073,1505 1065,1503 1066,1511 L 1045,1524 1067,1540 C 1064,1541 1059,1542 1056,1544 1046,1554 1049,1570 1031,1568 1030,1574 1025,1575 1023,1580 1020,1586 1019,1593 1016,1599 1012,1605 1006,1607 1003,1614 1001,1619 1003,1624 1002,1629 1001,1632 996.3,1635 996.8,1638 997.9,1644 1011,1634 1014,1638 1017,1643 1018,1656 1016,1661 1015,1665 1011,1670 1014,1674 1018,1680 1030,1674 1036,1677 1041,1681 1037,1685 1037,1690 1038,1693 1042,1697 1045,1699 1053,1705 1068,1699 1074,1706 1081,1713 1071,1726 1065,1729 L 1086,1742 C 1077,1747 1089,1755 1090,1761 1093,1770 1093,1780 1098,1789 1101,1794 1106,1797 1109,1801 1112,1806 1112,1811 1117,1814 1126,1819 1140,1806 1145,1818 1148,1825 1145,1834 1148,1841 1149,1845 1155,1849 1154,1854 1153,1860 1136,1869 1144,1877 1159,1890 1167,1871 1180,1872 1193,1873 1201,1884 1213,1887 1213,1879 1212,1868 1216,1861 1219,1857 1223,1854 1226,1850 1229,1843 1231,1837 1239,1834 1248,1830 1257,1838 1266,1834 1265,1831 1258,1821 1260,1817 1261,1815 1266,1816 1268,1816 1276,1815 1283,1818 1286,1808 L 1311,1822 1324,1814 1336,1813 1350,1807 C 1356,1820 1364,1840 1380,1834 1384,1844 1396,1844 1404,1837 1407,1834 1408,1829 1411,1826 1414,1824 1419,1824 1421,1821 1427,1814 1415,1808 1421,1801 1431,1791 1439,1807 1448,1806 1454,1806 1457,1798 1462,1795 1469,1792 1480,1795 1487,1798 1488,1792 1490,1783 1485,1779 L 1485,1778 1493,1775 1493,1774 C 1487,1771 1482,1766 1481,1759 L 1478,1759 1481,1749 C 1463,1744 1477,1734 1478,1723 1478,1715 1474,1708 1472,1701 1470,1698 1472,1694 1470,1691 1468,1687 1454,1679 1449,1678 1445,1678 1438,1680 1435,1676 1432,1673 1433,1668 1432,1664 1431,1661 1428,1658 1429,1655 1429,1653 1436,1652 1438,1651 1444,1649 1445,1646 1450,1644 1454,1642 1463,1643 1461,1635 1460,1628 1443,1631 1438,1626 1433,1621 1431,1612 1434,1606 1436,1603 1440,1601 1440,1597 1441,1593 1436,1592 1436,1589 1435,1586 1438,1582 1439,1580 L 1436,1577 1442,1575 1438,1568 1441,1567 1441,1566 1433,1565 1438,1562 1438,1561 C 1435,1561 1433,1560 1433,1557 1433,1546 1440,1538 1431,1528 L 1437,1526 C 1432,1518 1435,1508 1445,1503 L 1444,1493 C 1430,1501 1412,1505 1396,1508 1393,1509 1390,1512 1387,1513 1383,1514 1378,1512 1374,1513 1370,1515 1368,1518 1365,1519 1361,1520 1357,1518 1353,1520 1346,1522 1345,1533 1337,1536 1334,1538 1330,1535 1327,1535 1320,1537 1315,1543 1309,1545 1305,1546 1301,1543 1297,1544 1288,1546 1284,1553 1274,1552 1268,1551 1265,1544 1258,1543 L 1265,1536 1253,1525 C 1258,1517 1254,1506 1243,1509 L 1242,1497 1252,1495 C 1252,1483 1244,1478 1239,1469 1237,1466 1239,1462 1237,1459 1236,1456 1224,1450 1220,1449 1213,1448 1204,1452 1196,1451 1195,1449 1195,1447 1193,1445 1190,1443 1186,1445 1183,1444 1178,1443 1168,1436 1164,1444 1161,1451 1168,1457 1171,1462 z"
       id="malo"
	onclick="wojewod(this.id)"
       />
</g>
</g>

  <g transform="translate(-740 -75)" style="pointer-events:none">
	<circle class="money" cx="860" cy="630" r="105" style="fill-opacity:0.6" />
	<g class="infoText" style="opacity:0">
		<text x="860" y="650">
			<tspan class="suma val" x="860" dy="0"></tspan>
			<tspan class="suma curr" x="860" dy="1em">thou. zł</tspan></text>
	  <g class="info-box" transform="translate(860 565)">
		<text x="0" y="0" class="dlugiTytul middle">
			<tspan id="line1" class="middle" x="0" y="0em"></tspan>
			<tspan id="line2" class="middle" x="0" y="1.5em"></tspan>
			<tspan id="line3" class="middle" x="0" y="3em"></tspan>
		</text>
	</g>
  </g>
  </g>

<g>
	<text style="font-size:.7em;cursor:pointer" y="715" x="190">All data in thousands of zł (PLN) in real value (after inflation) in prices from 2013
<tspan dy="1.5em" x="190">Source: Bank of Local Data Central Statistic Office (local govt. spending); reports from state budget spending in chapter 921 (2007-2013)</tspan>
</text>
</g>

<a xlink:href="mailto:mar@mortemale.org" target="_blank">
	<g transform="translate(720 680)">
	     <text style="font-size:.7em">By: Marcin Wolniewicz</text>
	</g>
</a>
     

<g transform="translate(30 35)">
	<rect x="-20" y="-25" width="850" height="70" class="tloTytul" />
     <text class="naglowek" style="text-anchor:start" x="-5">Public investment in culture
	<tspan dy="1.5em" x="-5">and national heritage in Poland</tspan>
	</text>
</g>

	<g class="b_inst" onclick="setType('inst')" transform="translate(10 100)">
		<rect x="0" y="0" width="210" height="40" class="button darker" />
		<text class="naglowek strzalka" y="26" x="60" style="text-anchor:start">Institutions</text>
	</g>

	<g class="b_majbiez" onclick="setType('majbiez')" transform="translate(10 150)">
		<rect x="0" y="0" width="210" height="40" class="button darker" />
		<text class="naglowek strzalka" y="26" x="105" style="text-anchor:middle">Current and capital</text>
	</g>

	<g id="rokContainer" transform="translate(10, 700)">

		<path d="M 0,0 800,0 z" class="yearTick" />
		<g transform="translate(100 0)" class="ticker" onclick="changeYear(2007)">
			<rect x="-20" y="-20" width="40" height="40" class="nofill" />
			<path d="M 0,-10 0,-2 z" class="yearTick" />
		</g>

		<g transform="translate(200 0)" class="ticker" onclick="changeYear(2008)">
			<rect x="-20" y="-20" width="40" height="40" class="nofill" />
			<path d="M 0,-10 0,-2 z" class="yearTick" />
		</g>

		<g transform="translate(300 0)" class="ticker" onclick="changeYear(2009)">
			<rect x="-20" y="-20" width="40" height="40" class="nofill" />
			<path d="M 0,-10 0,-2 z" class="yearTick" />
		</g>

		<g transform="translate(400 0)" class="ticker" onclick="changeYear(2010)">
			<rect x="-20" y="-20" width="40" height="40" class="nofill" />
			<path d="M 0,-10 0,-2 z" class="yearTick" />
		</g>
		<g transform="translate(500 0)" class="ticker" onclick="changeYear(2011)">
			<rect x="-20" y="-20" width="40" height="40" class="nofill" />
			<path d="M 0,-10 0,-2 z" class="yearTick" />
		</g>

		<g transform="translate(600 0)" class="ticker" onclick="changeYear(2012)">
			<rect x="-20" y="-20" width="40" height="40" class="nofill" />
			<path d="M 0,-10 0,-2 z" class="yearTick" />
		</g>

		<g transform="translate(700 0)" class="ticker" onclick="changeYear(2013)">
			<rect x="-20" y="-20" width="40" height="40" class="nofill" />
			<path d="M 0,-10 0,-2 z" class="yearTick" />
		</g>

		<path d="M 0,10 -10,0 -10,20 z" class="strzalka" onclick="stepYear(true)" transform="translate(805, -10)" />

		<g id="yearMarker" transform="translate(70 4)">
			<g>
				<circle cx="22" cy="-6" r="33" class="year" />
				<text class="naglowek" y="1" x="22" id="rok">2007</text>
			</g>
		</g>
		
	</g>
  <g
     id="lupa" transform="translate(790 20) scale(.4)" style="stroke-opacity:0" onclick="toggleZoom()">
    <path
       d="M 125.5,216.3 A 32.66,32.66 0 1 1 60.18,216.3 32.66,32.66 0 1 1 125.5,216.3 z"
       id="path2989"
       style="fill:none;stroke:#000000;stroke-width:11.6;stroke-miterlimit:4;stroke-dasharray:none" />
    <path
       d="M 117.1,239.5 159.1,275"
       id="path3759"
       style="fill:none;stroke:#000000;stroke-width:12;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none" />
    <path
       d="M 92.7,198.7 92.7,235.7"
       id="verticalLine"
       style="fill:none;stroke:#000000;stroke-width:5.4;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none" />
    <path
       d="M 75.48,216 110.8,216"
       id="path3765"
       style="fill:none;stroke:#000000;stroke-width:5.3999;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;;stroke-dasharray:none" />
    <rect
       width="190"
       height="145.3"
       x="30.09"
       y="160.8"
       id="rect3761"
       style="fill:black;fill-opacity:0;stroke:none;cursor:pointer" />

</g>


<g transform="translate(90 0)">
  <a xlink:href="http://www.kalecki.org" target="_blank"><g
     id="logoKalecki" transform="translate(710 20) scale(.2)" >
<rect x="-50" y="-50" width="347" height="347" style="fill:white" />
<g transform="scale(.3) translate(0 300)">
    <path
       d="M 506.8,154.7 C 495.3,152.7 484.7,144.7 482.1,135.9 480.3,130 480.6,119.9 482.8,115.2 485.4,109.3 493.6,102.4 500.4,100.2 510.4,97.08 528.2,98.48 534.3,103 536,104.3 536,104.5 534.6,107.3 531.5,113 531.6,112.9 526.8,111.1 524.4,110.2 519,109.4 514.9,109.3 505.3,109.2 498.6,112.2 495.2,118.3 491,125.6 493.3,135.8 500.1,140.4 507.1,145.1 519.6,145.7 528.6,141.7 L 532.8,139.9 535.3,143.8 C 536.7,145.9 537.9,148.1 537.9,148.6 537.9,150 528.7,153.5 521.8,154.6 514.7,155.8 513.4,155.8 506.8,154.7 z"
       id="path3055"
       style="fill:#000000" />
    <path
       d="M 715.9,154.4 C 708,152.5 703.5,150.1 698.9,145 693.3,139 691.6,134.6 691.5,126.2 691.4,109.2 704.5,98.38 725,98.48 732.3,98.48 741.5,100.4 744.9,102.7 746.2,103.5 746.1,104.2 743.9,108.2 742.6,110.7 741.4,112.7 741.3,112.7 741.2,112.7 739.4,112 737.3,111 734.8,110 730.6,109.4 725.4,109.3 718.7,109.3 716.6,109.7 712.9,111.8 704,116.7 701.2,126.4 706.2,135.2 709.7,141.3 715.6,144.2 724.9,144.2 733.6,144.2 738,142.2 741.7,136.6 L 744,133.2 734.5,132.9 724.9,132.6 724.9,127.7 724.9,122.7 739.9,122.7 754.9,122.7 754.9,128.7 C 754.9,136.3 753,141 747.6,146.5 740.6,153.7 727.3,157 715.9,154.4 z"
       id="path3053"
       style="fill:#000000" />
    <path
       d="M 788.3,154.7 C 778.7,152.7 770.7,147 766.6,139.3 763.5,133.4 763.5,120 766.6,114.1 769.6,108.4 777,102.1 783.2,100.1 794.4,96.28 809.7,98.78 818.1,105.7 829.9,115.1 829.9,135.4 819.3,146.2 812.3,153.2 798.7,156.9 788.3,154.7 z"
       id="path3051"
       style="fill:#000000" />
    <path
       d="M 802.1,143.7 C 806.5,142.4 811.4,138.5 813.4,134.6 815.6,130.4 815.3,122.2 812.8,117.7 809.6,112 803.9,109.3 795.4,109.3 783,109.3 775.9,115.7 775.9,126.9 775.9,139.5 788.4,147.5 802.1,143.7 z"
       id="path3049"
       style="fill:#ffffff;fill-opacity:1" />
    <path
       d="M 134.1,121.3 C 117.5,103 102.8,86.58 101.4,84.88 L 98.88,81.88 129.1,45.78 159.4,9.682 183.3,9.682 C 206,9.682 207.1,9.782 205.7,11.48 204.8,12.38 190.8,28.48 174.5,47.08 L 144.8,81.08 152.2,88.58 C 160.8,97.58 206.7,145.5 211.8,151 L 215.3,154.7 189.7,154.7 164.2,154.7 134.1,121.3 z"
       id="path3047"
       style="fill:#940125;fill-opacity:1" />
    <path
       d="M 239.9,126.7 239.9,98.68 245.9,98.68 251.9,98.68 251.9,112.9 251.9,127.2 266.2,112.9 280.4,98.68 287.9,98.68 295.4,98.68 281.9,112.2 268.5,125.7 272.4,129.9 C 274.6,132.3 280.7,138.7 285.9,144.2 L 295.4,154.2 288,154.5 280.5,154.8 269.9,144.2 259.3,133.7 255.6,137.5 C 252.1,141.1 251.9,141.6 251.9,148 L 251.9,154.7 245.9,154.7 239.9,154.7 239.9,126.7 z"
       id="path3045"
       style="fill:#000000" />
    <path
       d="M 298.9,154 C 298.9,153.5 304.6,140.9 311.6,126 L 324.4,98.68 330.5,98.68 336.6,98.68 349.7,126 C 357,140.9 362.9,153.5 362.9,154 362.9,154.4 360.2,154.7 356.9,154.7 L 350.8,154.7 348.9,150.2 347,145.7 330.9,145.7 314.8,145.7 312.9,150.2 311,154.7 304.9,154.7 C 301.6,154.7 298.9,154.4 298.9,154 z"
       id="path3043"
       style="fill:#000000" />
    <path
       d="M 339.3,130.2 C 338,127.1 335.5,121.8 333.7,118.4 L 330.6,112.2 325.2,123.6 C 322.3,129.8 319.9,135.1 319.9,135.3 319.9,135.5 324.8,135.7 330.8,135.7 L 341.8,135.7 339.3,130.2 z"
       id="path3041"
       style="fill:#ffffff;fill-opacity:1" />
    <path
       d="M 371.9,126.7 371.9,98.68 377.9,98.68 383.9,98.68 383.9,121.2 383.9,143.6 399.6,143.9 415.4,144.2 415.4,149.2 415.4,154.2 393.6,154.5 371.9,154.7 371.9,126.7 z"
       id="path3039"
       style="fill:#000000" />
    <path
       d="M 424.9,126.7 424.9,98.68 448.6,98.88 472.4,99.18 472.4,104.2 472.4,109.2 454.6,109.5 436.9,109.7 436.9,114.7 436.9,119.7 452.4,119.7 467.9,119.7 467.9,124.7 467.9,129.7 452.4,129.7 436.9,129.7 436.9,136.7 436.9,143.7 454.9,143.7 472.9,143.7 472.9,149.2 472.9,154.7 448.9,154.7 424.9,154.7 424.9,126.7 z"
       id="path3037"
       style="fill:#000000" />
    <path
       d="M 548.4,153.5 C 548.1,152.8 548,140.3 548.1,125.7 L 548.4,99.18 554.4,99.18 560.4,99.18 560.7,112.6 561,125.9 574.9,112.3 588.9,98.68 595.9,98.68 C 599.8,98.68 602.9,98.98 602.9,99.38 602.9,99.78 596.9,105.8 589.7,112.8 L 576.4,125.4 589.4,139.1 C 596.6,146.7 602.5,153.3 602.7,153.8 602.9,154.3 599.8,154.7 595.6,154.7 L 588.1,154.7 578.2,144.3 568.4,133.9 564.7,137.3 C 561.2,140.4 561,141 560.7,147.4 L 560.4,154.2 554.6,154.5 C 550.6,154.7 548.7,154.4 548.4,153.5 z"
       id="path3035"
       style="fill:#000000" />
    <path
       d="M 609.9,126.7 609.9,98.68 615.9,98.68 621.9,98.68 621.9,126.7 621.9,154.7 615.9,154.7 609.9,154.7 609.9,126.7 z"
       id="path3033"
       style="fill:#000000" />
    <path
       d="M 635.9,126.7 635.9,98.68 659.4,98.68 682.9,98.68 682.9,104.2 682.9,109.7 665.4,109.7 647.9,109.7 647.9,114.7 647.9,119.7 663.4,119.7 678.9,119.7 678.9,124.7 678.9,129.7 663.4,129.7 647.9,129.7 647.9,136.7 647.9,143.7 665.9,143.7 683.9,143.7 683.9,149.2 683.9,154.7 659.9,154.7 635.9,154.7 635.9,126.7 z"
       id="path3031"
       style="fill:#000000" />
    <path
       d="M 8.881,137.2 8.881,120.7 26.88,120.7 44.88,120.7 44.88,137.2 44.88,153.7 26.88,153.7 8.881,153.7 8.881,137.2 z"
       id="path3029"
       style="fill:#8a8c8f;fill-opacity:1" />
    <path
       d="M 8.881,82.18 8.881,65.68 44.88,65.68 80.88,65.68 80.88,82.18 80.88,98.68 44.88,98.68 8.881,98.68 8.881,82.18 z"
       id="path3027"
       style="fill:#8a8c8f;fill-opacity:1" />
    <path
       d="M 622.7,78.98 620.7,74.38 623.7,71.78 C 629.5,66.98 629.9,64.48 629.9,35.68 L 629.9,9.682 635.9,9.682 641.9,9.682 641.9,35.98 C 641.9,64.18 641.2,69.48 636.7,75.18 634.4,78.08 627.2,83.68 625.7,83.68 625.2,83.68 623.9,81.58 622.7,78.98 z"
       id="path3025"
       style="fill:#000000" />
    <path
       d="M 318,65.68 C 311.9,64.38 305.3,60.18 302.4,55.88 298.8,50.38 297.8,43.78 298.1,26.18 L 298.4,10.18 304.1,9.882 309.7,9.582 310.1,28.08 C 310.4,44.88 310.6,46.78 312.5,49.38 318.4,57.38 333.5,57.78 338.6,50.08 340.1,47.68 340.5,44.48 340.9,28.68 L 341.4,10.18 347.1,9.882 352.9,9.582 352.9,28.88 C 352.9,50.88 352.2,53.48 345.1,59.88 339.1,65.28 327.8,67.68 318,65.68 z"
       id="path3023"
       style="fill:#000000" />
    <path
       d="M 586.9,65.28 C 578.6,63.28 576.3,62.08 570.9,57.08 563.5,50.18 560.9,39.18 564.1,28.28 565.9,22.28 574,14.48 581.2,11.78 591.1,8.182 609.9,9.382 616.3,13.98 618.1,15.38 618.1,15.48 615.9,19.48 614.6,21.78 613.2,23.68 612.8,23.68 612.5,23.68 610.4,22.98 608.3,22.08 602.1,19.48 590,19.88 584.1,22.78 571.9,29.08 572,46.28 584.4,52.68 591,56.08 603,56.18 610.1,52.98 L 614.9,50.78 617.6,55.38 C 620.1,59.78 620.2,59.98 618.3,61.08 610.6,65.58 596.2,67.58 586.9,65.28 z"
       id="path3021"
       style="fill:#000000" />
    <path
       d="M 239.9,37.68 239.9,9.682 264.9,9.682 289.9,9.682 289.9,15.18 289.9,20.68 270.9,20.68 251.9,20.68 251.9,27.18 251.9,33.68 267.9,33.68 283.9,33.68 283.9,38.68 283.9,43.68 267.9,43.68 251.9,43.68 251.9,54.68 251.9,65.68 245.9,65.68 239.9,65.68 239.9,37.68 z"
       id="path3019"
       style="fill:#000000" />
    <path
       d="M 366.9,37.68 366.9,9.682 372.4,9.682 C 377.4,9.682 379.5,10.48 394.9,18.58 L 411.9,27.48 411.9,18.58 411.9,9.682 417.9,9.682 423.9,9.682 423.9,37.68 423.9,65.68 417.9,65.68 411.9,65.68 411.9,52.98 411.9,40.18 396,31.98 C 387.2,27.38 379.8,23.68 379.5,23.68 379.2,23.68 378.9,33.18 378.9,44.68 L 378.9,65.68 372.9,65.68 366.9,65.68 366.9,37.68 z"
       id="path3017"
       style="fill:#000000" />
    <path
       d="M 438.9,37.78 438.9,9.682 450.6,9.682 C 470.2,9.682 480.3,12.18 486.7,18.68 491.5,23.38 493.1,27.38 493.7,34.88 494.4,44.78 492.6,50.08 486.5,56.18 478.9,63.68 474.7,64.88 455.1,65.48 L 438.9,65.88 438.9,37.78 z"
       id="path3015"
       style="fill:#000000" />
    <path
       d="M 474.7,51.88 C 479.2,48.58 481.3,44.18 481.3,37.68 481.4,25.98 474.6,20.68 459.7,20.68 L 450.9,20.68 450.9,37.78 450.9,54.88 461.1,54.48 C 470,54.18 471.9,53.88 474.7,51.88 z"
       id="path3013"
       style="fill:#ffffff;fill-opacity:1" />
    <path
       d="M 495.9,64.98 C 496,64.48 501.7,52.08 508.7,37.18 L 521.5,10.18 527.7,10.18 534,10.18 546.9,36.98 C 554.1,51.78 559.9,64.28 559.9,64.78 559.9,65.28 557.3,65.68 554.1,65.68 L 548.3,65.68 546.1,61.18 543.9,56.68 528.1,56.68 512.3,56.68 510.1,61.18 507.9,65.68 501.9,65.68 C 498.6,65.68 495.9,65.38 495.9,64.98 z"
       id="path3011"
       style="fill:#000000" />
    <path
       d="M 537.9,44.28 C 537.4,42.98 534.9,37.68 532.3,32.58 L 527.6,23.18 524.2,30.68 C 522.3,34.78 519.9,40.08 518.8,42.48 L 517,46.68 527.9,46.68 538.9,46.68 537.9,44.28 z"
       id="path3009"
       style="fill:#ffffff;fill-opacity:1" />
    <path
       d="M 649.9,64.58 C 649.9,64.08 655.6,51.48 662.5,36.58 L 675.2,9.682 681,9.682 C 685.5,9.682 687.1,10.08 687.9,11.48 689.3,13.78 713.9,64.68 713.9,65.28 713.9,65.48 711.2,65.68 707.9,65.68 L 701.9,65.68 699.7,61.18 697.5,56.68 681.7,56.68 665.9,56.68 663.7,61.18 661.5,65.68 655.7,65.68 C 652.3,65.68 649.9,65.28 649.9,64.58 z"
       id="path3007"
       style="fill:#000000" />
    <path
       d="M 691.9,45.78 C 691.9,45.18 689.5,39.88 686.5,33.88 L 681.2,22.98 676.6,33.08 C 674.1,38.68 671.7,43.98 671.4,44.98 670.7,46.48 671.6,46.68 681.3,46.68 687.3,46.68 691.9,46.28 691.9,45.78 z"
       id="path3005"
       style="fill:#ffffff;fill-opacity:1" />
    <path
       d="M 8.881,26.68 8.881,9.682 62.88,9.682 116.9,9.682 116.9,26.68 116.9,43.68 62.88,43.68 8.881,43.68 8.881,26.68 z"
       id="path3001"
       style="fill:#8a8c8f;fill-opacity:1" />
</g>
  </g></a>

<a xlink:href="http://www.nck.pl/kultura-samorzadowa-25/" target="_blank">
  <g
     transform="translate(485,10) scale(.0535) "
     id="logoNCK">
<rect style="fill:white" x="870" y="0" width="2985" height="1300" />
    <path
       d="M 1547,-116.4 1546,346.2 C 1546,716.2 1546,810 1547,810 1548,811 1549,811 1551,811 1552,811 1553,811 1554,810 1555,810 1555,716.2 1555,346.2 L 1555,-116.4 1551,-116.4 1547,-116.4 z M 1827,448.2 C 1826,449.2 1819,456.2 1812,465.2 1805,474.2 1798,482.2 1797,482.2 1796,483.2 1796,479.2 1796,467.2 1796,456.2 1796,451.2 1795,450.2 1794,449.2 1784,448.2 1782,450.2 1780,450.2 1780,454.2 1780,486.2 1780,513.2 1780,523.2 1781,524.2 1783,525.2 1791,525.2 1794,524.2 1796,523.2 1796,522.2 1796,507.2 1796,499.2 1796,492.2 1797,492.2 1797,492.2 1803,499.2 1809,507.2 1823,524.2 1823,525.2 1831,525.2 1835,525.2 1838,524.2 1839,524.2 1841,522.2 1840,522.2 1833,512.2 1822,499.2 1812,486.2 1812,485.2 1812,484.2 1818,477.2 1825,470.2 1836,457.2 1839,452.2 1838,450.2 1837,449.2 1829,448.2 1827,448.2 z M 2138,449.1 C 2135,449.1 2133,449.4 2133,450.2 2132,451.2 2132,456.2 2132,477.2 2133,500.2 2133,504.2 2134,508.2 2137,515.2 2144,522.2 2151,524.2 2158,527.2 2173,526.2 2179,523.2 2193,517.2 2196,505.2 2196,469.2 L 2196,449.2 2191,449.2 C 2182,449.2 2182,448.2 2182,476.2 2182,499.2 2181,501.2 2179,505.2 2176,511.2 2172,514.2 2165,514.2 2158,514.2 2154,512.2 2151,506.2 2149,502.2 2148,500.2 2148,476.2 2148,463.2 2147,451.2 2147,450.2 2146,449.6 2142,449 2138,449.1 z M 1981,449.2 C 1975,449.1 1976,451.2 1976,486.2 1976,507.2 1977,522.2 1977,523.2 1978,523.2 1979,524.2 1981,524.2 1982,524.2 1990,525.2 1998,525.2 2010,525.2 2013,525.2 2015,523.2 2017,522.2 2020,516.2 2019,515.2 2019,514.2 2013,514.2 2006,514.2 1997,514.2 1993,514.2 1992,513.2 1991,512.2 1991,501.2 1991,480.2 L 1991,449.2 1985,449.2 C 1983,449.2 1982,449.2 1981,449.2 z M 1882,449.2 C 1878,449.2 1875,449.2 1874,450.2 1873,451.2 1873,456.2 1873,475.2 1873,488.2 1874,501.2 1874,504.2 1876,514.2 1882,521.2 1891,524.2 1895,526.2 1899,526.2 1906,526.2 1913,525.2 1916,525.2 1921,522.2 1927,519.2 1932,513.2 1934,506.2 1935,503.2 1937,453.2 1936,450.2 1936,449.2 1926,449.2 1924,450.2 1923,451.2 1923,457.2 1923,471.2 1923,508.2 1920,514.2 1905,514.2 1898,513.2 1898,513.2 1894,510.2 1889,504.2 1889,500.2 1888,473.2 L 1888,449.2 1882,449.2 z M 2040,449.2 2038,452.2 C 2038,454.2 2037,456.2 2037,457.2 2037,459.2 2038,459.2 2049,460.2 L 2060,460.2 2060,491.2 2060,524.2 C 2061,525.2 2063,525.2 2067,525.2 2077,525.2 2076,527.2 2076,491.2 L 2077,460.2 2086,460.2 C 2095,460.2 2096,460.2 2098,457.2 2099,456.2 2100,453.2 2100,452.2 L 2100,449.2 2070,449.2 2040,449.2 z M 2253,449.2 C 2244,449.2 2237,450.2 2236,450.2 2235,451.2 2234,506.2 2235,524.2 2235,525.2 2245,525.2 2248,524.2 2250,523.2 2250,522.2 2250,510.2 2250,502.2 2250,496.2 2251,495.2 2251,494.2 2253,494.2 2254,494.2 2257,495.2 2258,497.2 2267,512.2 2273,523.2 2276,525.2 2285,525.2 2288,525.2 2291,524.2 2292,524.2 2292,523.2 2290,520.2 2288,516.2 2285,512.2 2281,506.2 2278,501.2 2275,496.2 2273,492.2 2272,491.2 2270,490.2 2271,489.2 2275,486.2 2282,482.2 2284,476.2 2284,468.2 2283,460.2 2280,455.2 2273,452.2 2269,450.2 2267,449.2 2253,449.2 z M 2358,449.4 C 2356,449.4 2353,449.7 2352,450.2 2350,450.2 2349,452.2 2349,452.2 2349,453.2 2343,469.2 2335,487.2 2327,506.2 2321,521.2 2321,522.2 2321,523.2 2322,523.2 2323,524.2 2326,525.2 2332,525.2 2334,524.2 2334,524.2 2337,519.2 2339,514.2 L 2343,504.2 2355,504.2 C 2364,504.2 2368,504.2 2369,505.2 2369,506.2 2371,510.2 2372,514.2 2376,525.2 2377,525.2 2385,525.2 2388,524.2 2392,524.2 2392,523.2 2393,522.2 2366,453.2 2364,450.2 2363,449.7 2361,449.4 2358,449.4 z M 2254,458.4 C 2257,458.3 2261,459.9 2264,462.2 2269,467.2 2269,478.2 2263,482.2 2260,484.2 2253,485.2 2251,484.2 2249,482.2 2250,461.2 2251,459.2 2251,458.7 2252,458.5 2254,458.4 z M 958.5,463.1 C 957.6,463.1 956.6,463.1 955.7,463.2 936.7,464.2 925.7,476.2 925.7,494.2 925.7,509.2 934.7,519.2 947.7,523.2 953.7,524.2 965.7,523.2 971.7,521.2 977.7,519.2 984.7,513.2 987.7,507.2 989.7,502.2 989.7,500.2 989.7,492.2 989.7,484.2 989.7,483.2 986.7,478.2 981.1,467.9 971.9,462.9 958.5,463.1 z M 1143,463.2 C 1134,463.2 1131,464.2 1128,466.2 1121,469.2 1116,473.2 1113,480.2 1111,485.2 1110,487.2 1110,494.2 1110,500.2 1111,504.2 1112,507.2 1116,515.2 1123,521.2 1132,523.2 1137,524.2 1150,523.2 1155,522.2 1161,520.2 1168,514.2 1171,507.2 1174,502.2 1174,501.2 1174,493.2 1174,486.2 1174,483.2 1172,480.2 1169,474.2 1164,469.2 1158,466.2 1154,464.2 1152,463.2 1143,463.2 z M 1046,463.6 C 1043,463.6 1039,463.8 1036,464.2 1030,465.2 1025,466.2 1024,466.2 1023,467.2 1023,473.2 1023,493.2 1023,521.2 1023,521.2 1028,522.2 1029,522.2 1035,523.2 1040,523.2 1066,523.2 1081,513.2 1081,494.2 1081,485.2 1079,479.2 1075,474.2 1068,466.9 1059,463.5 1046,463.6 z M 686,463.8 C 684.4,463.7 682.3,463.8 679.7,464.2 L 670.7,464.2 670.7,492.2 670.7,522.2 C 671.7,523.2 679.7,523.2 682.7,522.2 684.7,521.2 684.7,520.2 684.7,503.2 684.7,492.2 684.7,485.2 685.7,485.2 685.7,486.2 689.7,493.2 694.7,501.2 698.7,509.2 703.7,517.2 704.7,519.2 L 707.7,523.2 714.7,522.2 C 718.7,522.2 722.7,521.2 723.7,521.2 724.7,520.2 724.7,513.2 724.7,492.2 724.7,471.2 724.7,464.2 723.7,464.2 722.7,463.2 719.7,464.2 716.7,464.2 L 710.7,464.2 710.7,480.2 C 710.7,489.2 710.7,496.2 709.7,496.2 709.7,496.2 705.7,489.2 701.7,481.2 696.7,473.2 692.7,465.2 691.7,464.2 690.4,464.2 688.8,463.8 686,463.8 z M 792.9,463.8 C 788.5,463.7 780.2,464.4 778.7,465.2 776.7,466.2 754.7,519.2 754.7,521.2 755.7,521.2 756.7,522.2 758.7,522.2 764.7,523.2 769.7,523.2 770.7,522.2 771.7,521.2 772.7,518.2 773.7,516.2 L 775.7,511.2 785.7,511.2 794.7,511.2 797.7,516.2 C 798.7,519.2 799.7,522.2 800.7,522.2 801.7,523.2 816.7,522.2 817.7,521.2 L 805.7,489.2 C 800.7,476.2 795.7,465.2 795.7,464.2 795.4,463.9 794.4,463.8 792.9,463.8 z M 868.8,463.8 C 866.3,463.8 863.6,463.9 860.7,464.2 854.7,465.2 849.7,465.2 849.7,466.2 848.7,466.2 847.7,521.2 848.7,522.2 849.7,523.2 861.7,523.2 863.7,522.2 864.7,522.2 865.7,520.2 865.7,512.2 865.7,504.2 865.7,502.2 866.7,501.2 869.7,500.2 870.7,502.2 875.7,511.2 881.7,522.2 882.7,523.2 891.7,523.2 897.7,523.2 899.7,523.2 899.7,522.2 900.7,520.2 893.7,507.2 887.7,498.2 885.7,496.2 885.7,496.2 889.7,493.2 894.7,489.2 895.7,486.2 895.7,480.2 895.7,468.8 886.5,463.6 868.8,463.8 z M 1214,463.8 C 1209,463.7 1202,464.4 1201,465.2 1200,466.2 1200,469.2 1203,477.2 1205,482.2 1209,495.2 1212,504.2 1215,514.2 1218,522.2 1219,522.2 1221,523.2 1232,522.2 1233,521.2 1235,520.2 1235,518.2 1241,500.2 1242,494.2 1244,490.2 1245,491.2 1245,491.2 1247,498.2 1249,506.2 1251,514.2 1253,521.2 1254,522.2 1255,524.2 1266,523.2 1268,521.2 1269,520.2 1274,508.2 1279,494.2 1287,473.2 1289,467.2 1288,466.2 1287,465.2 1285,464.2 1281,464.2 L 1274,464.2 1269,480.2 C 1267,489.2 1264,496.2 1264,496.2 1263,497.2 1262,495.2 1257,476.2 1254,465.2 1253,463.2 1247,464.2 1241,464.2 1238,466.2 1237,467.2 1237,468.2 1235,475.2 1233,483.2 1231,491.2 1229,497.2 1228,497.2 1228,496.2 1226,489.2 1223,481.2 1221,472.2 1218,465.2 1217,464.2 1216,463.9 1215,463.8 1214,463.8 z M 1358,464.2 1340,465.2 C 1327,465.2 1321,465.2 1320,466.2 1319,467.2 1319,471.2 1319,493.2 1319,520.2 1319,521.2 1323,522.2 1328,523.2 1353,523.2 1356,522.2 1358,520.2 1362,514.2 1361,512.2 1361,511.2 1356,511.2 1349,511.2 1338,511.2 1338,511.2 1337,509.2 L 1337,503.2 1337,499.2 1345,499.2 C 1353,498.2 1355,497.2 1357,493.2 1359,488.2 1358,487.2 1347,487.2 1337,487.2 1337,487.2 1337,481.2 1337,476.2 1337,476.2 1346,476.2 1354,476.2 1355,476.2 1357,473.2 1358,472.2 1359,469.2 1359,468.2 L 1358,464.2 z M 2355,470.2 2356,470.2 C 2358,471.2 2365,491.2 2364,492.2 2364,493.2 2348,493.2 2348,492.2 2347,491.2 2354,471.2 2355,470.2 z M 868.8,474.3 C 870.7,474.3 873,475.1 874.7,476.2 877.7,479.2 878.7,485.2 875.7,487.2 872.7,490.2 866.7,491.2 865.7,488.2 L 865.7,476.2 C 866.1,474.9 867.3,474.3 868.8,474.3 z M 957.7,475.2 C 967.7,475.2 973.7,489.2 969.7,502.2 968.7,507.2 967.7,508.2 964.7,510.2 959.7,513.2 953.7,512.2 949.7,508.2 946.7,504.2 945.7,500.2 945.7,493.2 945.7,482.2 949.7,475.2 957.7,475.2 z M 1041,475.2 1045,475.2 C 1051,475.2 1058,478.2 1060,483.2 1061,486.2 1062,488.2 1062,494.2 1061,503.2 1059,507.2 1052,510.2 1048,512.2 1042,513.2 1041,511.2 L 1041,492.2 1041,475.2 z M 1142,475.2 C 1150,475.2 1155,482.2 1155,494.2 1155,502.2 1154,506.2 1149,510.2 1146,512.2 1140,513.2 1137,510.2 1132,507.2 1129,501.2 1129,493.2 1129,481.2 1134,475.2 1142,475.2 z M 785.7,483.2 C 786.7,483.2 790.7,495.2 790.7,497.2 790.7,499.2 789.7,499.2 785.7,499.2 782.7,499.2 780.7,499.2 780.7,498.2 779.7,498.2 784.7,483.2 785.7,483.2 z M 1800,590.2 C 1797,590.1 1794,590.4 1792,591.2 1775,596.2 1771,617.2 1784,628.2 1787,630.2 1792,633.2 1796,636.2 1800,638.2 1804,641.2 1805,643.2 1807,646.2 1807,651.2 1804,654.2 1800,657.2 1790,657.2 1784,654.2 1779,651.2 1777,651.2 1776,654.2 1773,660.2 1776,664.2 1784,667.2 1794,670.2 1807,668.2 1814,662.2 1820,657.2 1822,652.2 1822,645.2 1822,634.2 1818,630.2 1802,620.2 1790,614.2 1788,606.2 1795,602.2 1799,601.2 1802,601.2 1809,603.2 L 1814,604.2 1817,601.2 C 1820,598.2 1819,595.2 1815,593.2 1812,591.3 1806,590.2 1800,590.2 z M 2112,590.2 C 2100,591.2 2093,594.2 2086,601.2 2079,610.2 2077,616.2 2077,629.2 2077,639.2 2077,641.2 2079,645.2 2084,657.2 2090,663.2 2101,666.2 2110,669.2 2124,668.2 2132,665.2 2145,659.2 2152,647.2 2153,631.2 2154,616.2 2148,603.2 2137,596.2 2130,591.2 2123,590.2 2112,590.2 z M 2602,590.2 C 2591,590.2 2590,591.2 2584,594.2 2573,599.2 2566,609.2 2564,623.2 2563,628.2 2563,631.2 2564,636.2 2567,651.2 2575,662.2 2589,667.2 2596,669.2 2612,668.2 2618,665.2 2630,660.2 2637,651.2 2640,637.2 2644,619.2 2636,601.2 2620,593.2 2615,591.2 2614,590.2 2602,590.2 z M 2028,591.1 C 2024,591.1 2019,591.9 2019,593.2 2018,594.2 2014,605.2 2009,617.2 2005,630.2 2000,640.2 2000,640.2 1999,640.2 1999,639.2 1990,615.2 1981,590.2 1981,591.2 1974,591.2 1970,592.2 1967,592.2 1967,593.2 1966,593.2 1955,660.2 1955,664.2 1955,665.2 1956,666.2 1956,666.2 1959,667.2 1967,667.2 1967,666.2 1968,665.2 1969,654.2 1971,641.2 1973,627.2 1975,616.2 1975,616.2 1975,615.2 1980,626.2 1984,640.2 L 1993,666.2 1996,666.2 C 2003,666.2 2004,665.2 2013,639.2 2018,626.2 2022,615.2 2022,615.2 2023,615.2 2024,623.2 2027,647.2 2029,667.2 2029,667.2 2035,667.2 2037,667.2 2041,667.2 2042,666.2 2045,666.2 2045,670.2 2038,625.2 2036,608.2 2033,593.2 2033,592.2 2032,591.4 2030,591.1 2028,591.1 z M 2397,591.1 C 2395,591.1 2393,591.4 2391,592.2 2389,592.2 2388,593.2 2387,595.2 2387,597.2 2380,613.2 2372,631.2 2362,657.2 2359,664.2 2360,665.2 2361,666.2 2364,666.2 2367,666.2 L 2372,667.2 2375,659.2 2380,649.2 2381,646.2 2393,646.2 C 2402,646.2 2406,646.2 2407,647.2 2408,649.2 2415,666.2 2415,667.2 2415,668.2 2413,670.2 2412,672.2 2405,680.2 2405,690.2 2411,694.2 2418,698.2 2430,695.2 2432,690.2 2432,686.2 2432,685.2 2427,686.2 2423,686.2 2422,686.2 2421,684.2 2418,680.2 2420,675.2 2426,670.2 L 2431,665.2 C 2431,663.2 2404,595.2 2402,593.2 2401,591.9 2399,591.1 2397,591.1 z M 2828,591.1 C 2826,591.1 2824,591.4 2822,592.2 2820,592.2 2819,593.2 2818,595.2 2818,596.2 2812,612.2 2804,631.2 2796,649.2 2790,664.2 2790,664.2 2790,665.2 2791,665.2 2792,666.2 2796,667.2 2803,667.2 2804,666.2 2804,665.2 2806,661.2 2808,657.2 2812,645.2 2811,646.2 2825,646.2 2839,646.2 2838,645.2 2842,657.2 2846,667.2 2846,667.2 2854,667.2 2857,667.2 2861,666.2 2861,665.2 2862,664.2 2859,655.2 2848,629.2 2841,610.2 2834,594.2 2833,593.2 2832,591.9 2830,591.1 2828,591.1 z M 2722,591.2 C 2720,591.1 2719,591.4 2717,592.2 2714,593.2 2713,593.2 2713,596.2 2713,599.2 2701,642.2 2700,642.2 2700,642.2 2697,632.2 2694,621.2 2686,594.2 2685,591.2 2681,591.2 2678,591.2 2671,593.2 2670,594.2 2669,594.2 2671,599.2 2673,604.2 2675,610.2 2679,626.2 2684,639.2 2688,653.2 2692,665.2 2692,666.2 2693,667.2 2694,668.2 2695,668.2 2698,668.2 2704,666.2 2705,664.2 2706,663.2 2709,653.2 2712,641.2 2715,630.2 2718,620.2 2719,620.2 2719,619.2 2720,620.2 2721,623.2 2721,625.2 2724,636.2 2727,647.2 2733,670.2 2733,669.2 2741,667.2 2745,666.2 2746,665.2 2748,658.2 2755,640.2 2769,598.2 2769,595.2 2769,593.2 2766,591.2 2760,591.2 2757,591.2 2757,589.2 2747,625.2 2744,635.2 2741,643.2 2741,643.2 2740,643.2 2739,639.2 2733,614.2 2730,605.2 2727,595.2 2727,594.2 2725,592.3 2724,591.2 2722,591.2 z M 2208,591.2 C 2199,591.2 2192,592.2 2191,592.2 2189,593.2 2189,596.2 2189,630.2 L 2189,667.2 2195,667.2 C 2199,667.2 2202,666.2 2203,666.2 2204,665.2 2204,660.2 2204,651.2 2204,644.2 2204,638.2 2205,637.2 2206,635.2 2211,637.2 2213,640.2 2214,641.2 2217,646.2 2219,651.2 2222,656.2 2225,661.2 2227,663.2 2231,667.2 2231,667.2 2238,667.2 2242,667.2 2245,667.2 2246,666.2 2246,665.2 2244,661.2 2241,657.2 2238,652.2 2234,646.2 2233,643.2 2231,641.2 2229,637.2 2227,635.2 2225,633.2 2225,632.2 2226,631.2 2236,623.2 2239,619.2 2238,610.2 2237,602.2 2234,597.2 2227,594.2 2223,592.2 2221,591.2 2208,591.2 z M 2277,591.2 2275,594.2 C 2273,598.2 2273,598.2 2275,600.2 2276,602.2 2279,602.2 2292,602.2 2301,602.2 2308,602.2 2308,603.2 2309,604.2 2299,622.2 2284,645.2 2271,664.2 2271,665.2 2276,666.2 2278,667.2 2289,667.2 2302,667.2 L 2325,667.2 2329,664.2 C 2330,662.2 2332,659.2 2332,658.2 2332,656.2 2332,656.2 2315,656.2 2305,656.2 2297,656.2 2297,655.2 2296,654.2 2298,651.2 2300,647.2 2308,636.2 2323,610.2 2326,603.2 2329,596.2 2330,592.2 2327,592.2 2327,591.2 2315,591.2 2301,591.2 L 2277,591.2 z M 2487,591.2 C 2477,591.2 2468,592.2 2467,592.2 L 2464,593.2 2464,629.2 2464,665.2 2466,666.2 C 2467,666.2 2472,667.2 2476,667.2 2492,669.2 2506,666.2 2516,659.2 2521,656.2 2525,651.2 2528,643.2 2531,637.2 2531,621.2 2529,613.2 2526,605.2 2518,597.2 2509,594.2 2504,592.2 2502,591.2 2487,591.2 z M 1889,591.4 C 1886,591.4 1884,591.7 1882,592.2 1881,592.2 1879,593.2 1879,594.2 1879,596.2 1873,611.2 1865,629.2 1857,648.2 1851,663.2 1851,664.2 1851,665.2 1852,665.2 1853,666.2 1857,667.2 1863,667.2 1864,666.2 1865,665.2 1867,660.2 1869,655.2 L 1873,646.2 1885,646.2 C 1894,646.2 1898,646.2 1899,647.2 1899,648.2 1901,652.2 1903,656.2 1906,667.2 1907,667.2 1915,667.2 1918,666.2 1922,666.2 1922,665.2 1923,665.2 1896,595.2 1894,592.2 1893,591.7 1891,591.4 1889,591.4 z M 2599,600 C 2605,599.9 2612,602.7 2616,607.2 2621,612.2 2623,618.2 2623,628.2 2623,633.2 2623,640.2 2622,642.2 2620,648.2 2614,655.2 2609,657.2 2603,659.2 2600,658.2 2594,655.2 2590,653.2 2588,651.2 2585,647.2 2576,631.2 2581,606.2 2594,601.2 2595,600.4 2597,600.1 2599,600 z M 2113,600.3 C 2117,600.3 2121,601.6 2125,604.2 2132,608.2 2135,616.2 2136,627.2 2137,642.2 2132,652.2 2124,656.2 2116,659.2 2108,658.2 2101,652.2 2091,642.2 2090,619.2 2099,607.2 2102,602.7 2107,600.4 2113,600.3 z M 2209,600.4 C 2212,600.3 2216,601.9 2219,604.2 2223,609.2 2223,620.2 2217,624.2 2215,625.2 2212,626.2 2210,627.2 2204,627.2 2204,627.2 2204,613.2 2204,603.2 2204,602.2 2206,601.2 2206,600.7 2207,600.5 2209,600.4 z M 2481,601.2 2489,602.2 C 2500,602.2 2507,605.2 2511,614.2 2514,620.2 2514,635.2 2512,642.2 2509,648.2 2503,654.2 2497,656.2 2492,657.2 2481,657.2 2480,656.2 L 2480,628.2 2481,601.2 z M 702.8,606.8 C 696.4,606.8 688.9,607.9 683.7,610.2 672.7,615.2 666.7,625.2 666.7,637.2 666.7,651.2 673.7,661.2 686.7,666.2 692.7,667.2 709.7,667.2 714.7,666.2 717.7,664.2 720.7,659.2 720.7,655.2 720.7,653.2 720.7,653.2 711.7,654.2 700.7,656.2 690.7,652.2 686.7,644.2 684.7,639.2 685.7,631.2 687.7,627.2 690.7,621.2 696.7,619.2 705.7,619.2 718.7,621.2 717.7,621.2 719.7,617.2 722.7,611.2 719.7,609.2 708.7,607.2 706.9,606.9 704.9,606.8 702.8,606.8 z M 876.7,607.2 C 872.7,607.2 868.7,607.2 866.7,608.2 L 863.7,608.2 863.7,637.2 C 863.7,659.2 863.7,666.2 864.7,666.2 865.7,667.2 875.7,666.2 876.7,665.2 876.7,665.2 877.7,657.2 877.7,647.2 877.7,637.2 877.7,630.2 878.7,629.2 878.7,629.2 881.7,633.2 884.7,639.2 890.7,652.2 898.7,665.2 899.7,666.2 900.7,666.2 910.7,666.2 914.7,665.2 L 917.7,665.2 917.7,636.2 916.7,607.2 912.7,607.2 C 903.7,607.2 903.7,607.2 903.7,625.2 L 902.7,640.2 894.7,625.2 C 890.7,617.2 885.7,610.2 885.7,609.2 883.7,607.2 881.7,607.2 876.7,607.2 z M 1182,607.2 C 1175,607.3 1175,608.9 1175,628.2 1176,638.2 1176,648.2 1177,651.2 1178,656.2 1186,664.2 1191,666.2 1195,667.2 1211,667.2 1216,666.2 1221,664.2 1227,659.2 1230,653.2 1232,648.2 1232,646.2 1232,627.2 L 1232,607.2 1227,607.2 C 1217,607.2 1217,606.2 1217,626.2 1217,637.2 1216,645.2 1215,647.2 1213,655.2 1204,658.2 1199,653.2 1194,649.2 1193,646.2 1193,626.2 L 1192,607.2 1186,607.2 C 1184,607.2 1183,607.2 1182,607.2 z M 1301,607.2 C 1297,608.2 1293,608.2 1292,609.2 1292,610.2 1291,612.2 1290,615.2 1290,618.2 1288,630.2 1286,642.2 1283,660.2 1283,664.2 1284,665.2 1286,666.2 1296,666.2 1297,665.2 1298,665.2 1299,657.2 1300,648.2 1302,632.2 1302,630.2 1303,631.2 1303,631.2 1306,639.2 1308,647.2 1311,656.2 1313,664.2 1314,664.2 1315,666.2 1323,665.2 1326,664.2 1328,663.2 1329,660.2 1333,648.2 1336,639.2 1338,632.2 1339,632.2 1340,632.2 1340,638.2 1341,655.2 1342,662.2 1342,665.2 1343,666.2 1345,667.2 1358,666.2 1359,665.2 1360,664.2 1353,609.2 1352,608.2 1350,607.2 1336,608.2 1334,609.2 1334,609.2 1331,616.2 1328,624.2 1326,631.2 1323,637.2 1322,637.2 1322,637.2 1319,631.2 1316,623.2 1314,616.2 1311,609.2 1310,608.2 1310,607.2 1308,607.2 1301,607.2 z M 1102,607.8 C 1100,607.8 1097,607.9 1094,608.2 1086,608.2 1079,608.2 1077,609.2 L 1075,610.2 1075,638.2 1075,666.2 C 1076,667.2 1089,666.2 1090,665.2 1091,665.2 1092,662.2 1092,656.2 1092,651.2 1092,646.2 1093,645.2 1094,643.2 1097,645.2 1098,648.2 1106,663.2 1110,667.2 1117,667.2 1122,667.2 1127,666.2 1127,665.2 1127,664.2 1117,647.2 1114,641.2 1112,639.2 1113,639.2 1117,635.2 1121,632.2 1121,631.2 1122,625.2 1122,620.2 1122,619.2 1120,616.2 1118,614.2 1115,611.2 1113,610.2 1110,608.7 1108,607.8 1102,607.8 z M 790.7,608.2 C 780.7,608.2 772.7,609.2 771.7,609.2 770.7,610.2 771.7,663.2 772.7,665.2 773.7,665.2 776.7,666.2 781.7,666.2 792.7,667.2 806.7,666.2 808.7,665.2 810.7,664.2 813.7,658.2 813.7,656.2 813.7,655.2 809.7,655.2 802.7,655.2 796.7,655.2 791.7,655.2 790.7,654.2 789.7,654.2 789.7,652.2 789.7,648.2 L 789.7,642.2 797.7,642.2 C 805.7,642.2 805.7,642.2 807.7,639.2 808.7,637.2 809.7,634.2 809.7,633.2 809.7,631.2 808.7,631.2 799.7,631.2 L 789.7,630.2 789.7,625.2 789.7,620.2 797.7,620.2 C 807.7,619.2 808.7,618.2 810.7,613.2 811.7,608.2 811.7,608.2 790.7,608.2 z M 997.7,608.2 C 969.7,608.2 970.7,608.2 968.7,614.2 966.7,619.2 968.7,620.2 978.7,620.2 L 986.7,620.2 986.7,642.2 C 986.7,661.2 986.7,664.2 987.7,666.2 989.7,667.2 990.7,667.2 996.7,667.2 1001,666.2 1004,666.2 1005,665.2 L 1005,643.2 1005,620.2 1012,620.2 C 1020,619.2 1022,618.2 1024,614.2 1026,608.2 1026,608.2 997.7,608.2 z M 1886,612.2 C 1887,612.2 1895,633.2 1894,634.2 1894,635.2 1890,635.2 1885,635.2 1881,635.2 1877,635.2 1877,634.2 1877,632.2 1885,612.2 1886,612.2 z M 2394,612.2 C 2395,612.2 2403,632.2 2403,634.2 2403,635.2 2399,635.2 2394,635.2 2387,635.2 2385,635.2 2385,634.2 2386,633.2 2387,628.2 2390,622.2 L 2394,612.2 z M 2825,612.2 C 2826,613.2 2834,631.2 2834,634.2 2834,635.2 2832,635.2 2826,635.2 2819,635.2 2817,635.2 2817,634.2 2817,631.2 2824,612.2 2825,612.2 z M 1092,618.2 1096,618.2 C 1099,618.2 1100,618.2 1102,620.2 1104,623.2 1104,628.2 1102,631.2 1099,633.2 1093,634.2 1092,632.2 L 1092,624.2 1092,618.2 z M 1799,736.2 C 1792,736.2 1785,738.5 1779,743 1776,746 1775,749 1777,752 1778,755 1780,755 1784,752 1790,749 1794,748 1798,749 1803,751 1804,754 1804,759 1804,769 1799,778 1785,794 1780,799 1778,803 1778,805 1778,807 1778,808 1782,808 1788,809 1813,809 1817,808 1821,807 1825,802 1825,799 1825,798 1823,797 1811,797 L 1797,797 1803,789 C 1816,775 1820,768 1820,758 1820,747 1815,740 1806,737 1803,736.5 1801,736.2 1799,736.2 z M 1896,736.7 C 1895,736.7 1894,736.8 1892,737 1888,738 1881,738 1877,738 1873,738 1869,738 1869,739 1866,740 1858,772 1860,774 1861,774 1866,776 1871,777 1881,778 1887,781 1889,784 1892,789 1889,796 1883,800 1879,801 1869,802 1864,801 1860,800 1859,802 1861,807 1862,809 1864,810 1866,811 1872,813 1885,812 1891,809 1901,805 1906,797 1906,787 1906,780 1904,776 1900,773 1896,769 1894,768 1883,766 L 1874,763 1874,760 C 1874,758 1875,755 1875,753 1876,751 1877,750 1885,750 1895,749 1898,748 1900,742 1902,737.9 1902,736.5 1896,736.7 z M 679.7,751 670.7,752 670.7,779 670.7,809 C 671.7,810 685.7,810 687.7,809 688.7,808 688.7,804 688.7,797 688.7,792 688.7,787 689.7,787 689.7,787 692.7,791 695.7,796 705.7,810 704.7,810 714.7,810 721.7,810 723.7,810 724.7,809 724.7,808 720.7,801 715.7,794 709.7,786 705.7,780 705.7,779 705.7,778 708.7,773 712.7,768 716.7,763 720.7,758 721.7,757 723.7,754 723.7,754 721.7,752 720.7,752 717.7,751 714.7,751 L 708.7,751 699.7,763 C 694.7,770 689.7,776 689.7,776 688.7,776 688.7,771 688.7,766 688.7,750 688.7,751 679.7,751 z M 786.7,751 778.7,752 778.7,770 C 778.7,785 778.7,790 779.7,795 781.7,802 787.7,807 793.7,809 800.7,811 811.7,811 818.7,809 824.7,807 829.7,803 832.7,797 834.7,792 834.7,790 835.7,771 L 835.7,751 828.7,751 C 824.7,751 821.7,751 820.7,752 819.7,753 819.7,758 819.7,770 819.7,790 818.7,792 815.7,796 812.7,798 811.7,799 808.7,799 798.7,799 796.7,795 796.7,772 796.7,763 795.7,754 795.7,753 795.7,751 794.7,751 786.7,751 z M 982.7,751 980.7,754 C 979.7,756 978.7,759 978.7,760 978.7,762 979.7,763 987.7,763 L 996.7,764 997.7,786 997.7,809 C 998.7,810 1012,811 1014,809 1015,809 1016,802 1016,786 L 1016,764 1024,763 C 1030,763 1031,762 1033,760 1034,759 1035,756 1035,755 L 1034,752 1008,751 982.7,751 z M 1094,751 C 1091,751 1090,751.2 1090,752 1088,754 1089,780 1090,788 1091,800 1096,807 1106,810 1112,811 1123,811 1130,809 1136,807 1142,802 1144,795 1146,790 1146,786 1146,771 L 1146,752 1139,752 1131,752 1131,771 C 1130,792 1129,795 1125,798 1121,799 1116,799 1113,797 1108,794 1107,791 1107,771 L 1106,752 1098,751 C 1096,751 1095,751 1094,751 z M 1315,751 C 1310,751 1306,752 1306,753 1305,754 1307,758 1314,769 L 1324,783 1324,795 C 1324,804 1324,808 1325,809 1327,811 1341,810 1341,809 1342,808 1342,802 1342,796 L 1342,784 1352,770 C 1357,761 1362,754 1362,754 1362,752 1358,751 1352,751 L 1347,751 1342,760 C 1339,766 1336,770 1336,770 1335,771 1333,768 1331,764 1329,761 1326,756 1325,754 L 1322,751 1315,751 z M 1969,751 1965,752 1964,761 C 1964,766 1963,771 1963,772 1962,773 1959,773 1953,773 1943,773 1942,774 1942,779 L 1943,783 1952,783 C 1959,783 1963,784 1963,784 1964,785 1964,790 1964,796 1964,803 1964,807 1965,807 1967,808 1973,807 1974,806 1974,805 1975,800 1975,794 L 1976,784 1985,783 C 1993,783 1994,783 1996,781 1996,779 1997,777 1997,776 1997,774 1996,773 1988,773 1974,773 1975,773 1975,763 1975,758 1975,753 1974,752 1974,751 1972,751 1969,751 z M 894.7,752 894.7,778 894.7,807 C 895.7,808 896.7,809 897.7,809 897.7,810 905.7,810 913.7,810 929.7,810 930.7,810 933.7,804 936.7,799 935.7,798 923.7,798 L 912.7,798 912.7,775 911.7,752 903.7,752 894.7,752 z M 1208,752 1206,753 1206,781 1206,809 C 1207,810 1219,810 1221,809 1222,809 1223,807 1223,799 1223,791 1223,789 1224,788 1227,787 1228,790 1233,798 1238,809 1240,810 1249,810 1259,810 1259,809 1254,801 1253,798 1250,793 1248,791 1247,789 1245,786 1244,785 1243,783 1244,782 1247,780 1252,776 1253,773 1253,767 1253,761 1250,757 1245,754 1241,752 1239,752 1226,752 L 1208,752 z M 1226,760.9 C 1228,760.9 1230,761.8 1232,763 1234,765 1235,766 1235,769 1235,772 1234,773 1232,775 1229,777 1224,778 1223,775 1222,773 1223,763 1224,762 1224,761.2 1225,760.9 1226,760.9 z"
       transform="translate(655.3,272)"
       style="fill:#000000" />
    <path
       d="M 1014,-115.7 C 1013,-115.7 1012,-115.6 1011,-115.4 1008,-114.9 1004,-111.4 982.7,-90.59 957.7,-65.09 956.7,-64.09 957.7,-56.59 958.7,-54.09 963.7,-48.31 981.7,-30.31 1011,-0.6125 1011,-4.7 988.7,17 973.7,32.4 973.7,32.79 973.7,37.09 973.7,41.29 973.7,41.69 988.7,57.09 1010,78.49 1011,75.71 986.7,98.81 976.7,108.3 967.7,116.4 966.7,116.7 965.7,117 963.7,117 962.7,116.6 959.7,115.7 927.7,84.71 925.7,80.81 922.7,75.81 924.7,73.29 939.7,58.59 961.7,36.29 961.7,38.21 939.7,15.81 930.7,6.512 921.7,-1.694 919.7,-2.594 914.7,-5.594 911.7,-4.194 892.7,14.91 869.7,38.51 869.7,35.8 890.7,56.5 898.7,64.8 905.7,72.7 906.7,74 L 906.7,79 C 905.7,82.2 874.7,114.4 870.7,116.1 868.7,116.8 866.7,117 864.7,116.6 860.7,115.7 829.7,84.81 827.7,80.31 826.7,78.41 826.7,76.01 826.7,74.81 827.7,73.61 834.7,65.6 842.7,57 863.7,35.8 863.7,38.29 842.7,16.59 820.7,-5.706 819.7,-1.613 848.7,-30.81 872.7,-55.21 873.7,-56.69 871.7,-64.09 870.7,-66.39 862.7,-74.89 846.7,-91.19 822.7,-114.7 822.7,-114.9 818.7,-114.9 814.7,-114.9 813.7,-114.3 811.7,-112 L 808.7,-109.1 808.7,105.9 808.7,321.2 C 809.7,322.2 901.7,322.2 1014,322.2 L 1218,321.2 1219,105.9 1219,-109.7 1216,-112.3 C 1214,-114.1 1211,-114.9 1209,-114.9 1206,-114.9 1204,-113.4 1181,-90.09 L 1156,-65.41 1156,-60.19 C 1156,-53.69 1155,-54.11 1181,-27.81 1204,-4.912 1204,-4.712 1199,2.688 1197,4.887 1191,11.79 1184,18.09 1171,29.99 1168,34.41 1169,38.91 1170,40.51 1176,47.99 1185,57.19 1206,78.29 1206,75 1182,99 L 1164,117.4 1160,116.8 C 1157,116.2 1154,113.7 1139,98.91 1129,89.41 1121,80.61 1121,79.41 1120,74.71 1122,71.59 1137,56.09 1154,39.39 1154,38.21 1151,32.31 1149,27.81 1118,-2.706 1114,-3.406 1113,-3.806 1111,-3.9 1109,-3.5 1108,-3.2 1099,5.094 1089,15.09 1066,38.69 1066,35.51 1087,56.91 1108,78.11 1108,74.91 1085,98.31 1075,108.1 1066,116.4 1065,116.8 1061,117.8 1057,115.1 1040,98.31 1018,75.61 1018,78.71 1038,58.31 1047,49.11 1054,41.31 1054,39.81 1056,34.51 1054,31.8 1038,16 1022,-0.3 1021,-1.788 1024,-7.188 1024,-8.387 1035,-19.39 1047,-31.69 L 1069,-53.91 1069,-59.91 1069,-65.91 1045,-90.31 C 1029,-106.1 1019,-115 1017,-115.4 1016,-115.6 1015,-115.7 1014,-115.7 z M 866.7,147.1 C 868.7,147.1 871.7,149.3 880.7,158.3 895.7,173 895.7,172.1 880.7,187.2 866.7,201.2 867.7,201.2 852.7,187.2 843.7,177.2 841.7,175 841.7,172.6 841.7,170.2 843.7,167.7 852.7,158.4 861.7,149.3 864.7,147.1 866.7,147.1 z M 964.7,147.1 C 967.7,147.1 969.7,149.3 978.7,158.4 988.7,167.6 990.7,170.2 990.7,172.6 990.7,175 988.7,177.2 978.7,187.2 969.7,196.2 967.7,198.2 964.7,198.2 962.7,198.2 959.7,196.2 950.7,187.2 935.7,172 935.7,173 950.7,158.3 959.7,149.3 962.7,147.1 964.7,147.1 z M 1063,147.1 C 1066,147.1 1089,169.5 1089,173 1089,174.7 1085,179.2 1077,187.2 1063,202.2 1064,202.2 1048,186.2 1042,180.2 1037,173.6 1037,172.6 1037,171.6 1042,165.5 1048,158.9 1057,149.9 1061,147.1 1063,147.1 z M 1161,147.1 C 1163,147.1 1166,150 1175,158.9 1182,165.8 1187,171.6 1187,172.7 1187,173.8 1182,179.2 1175,186.2 1165,196.2 1163,198.2 1160,198.2 1158,198.2 1155,196.2 1146,186.2 1140,179.2 1135,173.8 1135,172.6 1135,169.5 1158,147.1 1161,147.1 z M 866.7,238.2 C 869.7,238.2 883.7,252.2 883.7,254.2 883.7,256.2 880.7,260.2 875.7,264.2 871.7,268.2 867.7,272.2 866.7,272.2 864.7,272.2 850.7,258.2 849.7,255.2 849.7,253.2 849.7,252.2 856.7,245.2 861.7,241.2 865.7,238.2 866.7,238.2 z M 964.7,238.2 C 967.7,238.2 981.7,252.2 981.7,254.2 981.7,256.2 978.7,260.2 973.7,264.2 969.7,268.2 965.7,272.2 964.7,272.2 962.7,272.2 947.7,257.2 947.7,255.2 947.7,253.2 962.7,238.2 964.7,238.2 z M 1063,238.2 C 1066,238.2 1079,251.2 1079,254.2 1080,256.2 1079,257.2 1072,264.2 1068,268.2 1064,272.2 1063,272.2 1061,272.2 1047,258.2 1046,256.2 1046,254.2 1047,252.2 1053,246.2 1058,241.2 1062,238.2 1063,238.2 z M 1162,238.2 C 1165,239.2 1178,252.2 1178,255.2 1178,256.2 1174,260.2 1170,264.2 1166,268.2 1161,272.2 1161,272.2 1159,272.2 1144,257.2 1144,255.2 1144,254.2 1147,250.2 1152,246.2 1158,239.2 1160,238.2 1162,238.2 z"
       transform="translate(655.3,272)"
       style="fill:#c4122f;fill-opacity:1;stroke:none" />
    <path
       d="M 2467,165.2 C 2463,165.2 2458,169.5 2444,183.4 2422,206.2 2422,203 2443,224.9 2452,233.9 2461,241.9 2463,242.6 2464,243.4 2467,243.7 2468,243.4 2469,243.1 2478,235.9 2488,225.7 2511,202.8 2511,205.6 2489,183.9 2481,175.1 2472,167.2 2471,166.4 2469,165.7 2468,165.2 2467,165.2 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2612,165.2 C 2608,165.2 2603,169.5 2589,183.4 2571,201.9 2570,202.9 2573,208.9 2575,212.7 2605,241.8 2608,243 2609,243.5 2612,243.7 2613,243.4 2616,242.7 2650,209.5 2650,206.7 2651,201.6 2649,198.4 2634,183.3 2625,174.9 2617,167.3 2616,166.4 2614,165.7 2613,165.2 2612,165.2 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2757,165.2 C 2753,165.2 2748,169.4 2735,182.9 2718,199.6 2716,202.5 2718,207.3 2718,210.4 2749,241 2753,242.6 2754,243.4 2757,243.7 2758,243.4 2761,242.7 2795,209.6 2795,206.2 2796,204.8 2795,202.6 2795,201.2 2794,198 2765,168.6 2761,166.4 2759,165.7 2758,165.2 2757,165.2 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2538,237.6 C 2538,237.6 2537,237.7 2537,237.8 2534,238.5 2501,270.5 2500,274 2498,278.6 2501,282.2 2517,298.2 2525,306.8 2533,314.4 2535,315 2540,317.9 2541,317 2560,298.9 2569,289.4 2577,280.6 2578,279.4 2579,274.5 2577,271.5 2561,255.7 2547,241.7 2542,237.7 2538,237.6 z"
       style="fill:#f16725;fill-opacity:1" />
    <path
       d="M 2683,237.6 C 2683,237.6 2682,237.7 2682,237.8 2679,238.5 2647,269.6 2646,273.5 2643,278.7 2645,281.6 2661,297.4 2669,305.6 2677,313.2 2679,314.2 2685,318.2 2686,317.7 2705,298.3 2729,274.9 2728,278.3 2707,256.3 2692,241.9 2687,237.7 2683,237.6 z"
       style="fill:#f16725;fill-opacity:1" />
    <path
       d="M 2757,310 C 2753,309.7 2749,313.6 2735,327.3 2717,345.8 2715,348 2718,353.7 2721,358.5 2750,387.1 2754,388 2755,388.4 2757,388.6 2759,388.3 2762,387.6 2795,354.2 2795,351.2 2796,349.8 2795,347.6 2795,346.2 2794,343.1 2765,313.6 2761,311.5 2759,310.7 2758,310.1 2757,310 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2611,310.1 C 2607,310.5 2603,314.8 2590,327.4 2581,336.8 2573,345.6 2572,346.9 L 2572,351.9 C 2573,355.8 2605,386.9 2608,387.9 2610,388.4 2612,388.5 2614,388.3 2616,387.8 2650,354.1 2650,351.6 2651,345.6 2650,344.6 2634,328.8 2626,320.1 2617,312.3 2616,311.5 2614,310.5 2612,309.9 2611,310.1 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2466,310.1 C 2462,310.5 2458,314.8 2445,327.4 2436,336.8 2428,345.6 2427,346.9 L 2427,351.9 C 2428,355.7 2460,386.9 2463,388 2465,388.4 2468,388.4 2469,387.9 2470,387.4 2479,379.5 2488,370.2 2511,347.8 2511,350.5 2489,328.9 2481,320.1 2472,312.3 2471,311.5 2469,310.5 2467,309.9 2466,310.1 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2683,382.8 C 2683,382.8 2682,383 2681,383.3 2677,384.6 2647,414.9 2645,418.9 2643,424 2645,427.1 2663,444.9 2678,460.2 2680,461.2 2683,461.2 2688,461.2 2693,457.2 2708,442 2728,420.9 2728,423.2 2706,400.9 2692,386.9 2687,382.8 2683,382.8 z"
       style="fill:#f16725;fill-opacity:1" />
    <path
       d="M 2539,383 C 2534,382.7 2529,388.4 2518,399.7 2508,409 2500,417.7 2500,419 2498,423.7 2501,427.2 2518,444.4 2540,466.2 2537,466.2 2560,443.9 2569,434.4 2577,425.6 2578,424.4 2579,419.6 2577,416.5 2562,401.8 2550,389.4 2544,383.2 2539,383 z"
       style="fill:#f16725;fill-opacity:1" />
    <path
       d="M 2467,454.9 C 2463,454.8 2459,458.9 2445,473.2 2421,496.2 2422,493.2 2443,515.2 2452,524.2 2461,532.2 2463,533.2 2464,533.2 2467,534.2 2468,533.2 2469,533.2 2478,526.2 2488,516.2 2511,493.2 2511,495.2 2489,474.2 2481,465.2 2472,457.2 2471,456.2 2469,455.4 2468,454.9 2467,454.9 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2612,455.1 C 2608,455.2 2603,459.7 2589,473.2 2571,492.2 2570,493.2 2573,499.2 2575,503.2 2605,532.2 2608,533.2 2609,533.2 2612,534.2 2613,533.2 2616,533.2 2650,499.2 2650,497.2 2651,491.2 2649,488.2 2634,473.2 2625,465.2 2617,457.2 2616,456.2 2614,455.4 2613,455 2612,455.1 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2757,455.1 C 2753,455.2 2748,459.7 2735,473.2 2717,491.2 2715,493.2 2718,499.2 2721,503.2 2750,532.2 2754,533.2 L 2759,533.2 C 2762,532.2 2795,499.2 2795,496.2 2796,495.2 2795,492.2 2795,491.2 2794,488.2 2765,458.2 2761,456.2 2759,455.4 2758,455 2757,455.1 z"
       style="fill:#fcb614;fill-opacity:1" />
    <path
       d="M 2465,588 C 2465,588 2464,588.1 2464,588.2 2463,589.2 2454,597.2 2444,606.2 2421,629.2 2422,626.2 2444,648.2 2453,658.2 2461,666.2 2463,666.2 2466,667.2 2469,667.2 2473,664.2 2479,659.2 2504,634.2 2505,631.2 2507,625.2 2505,622.2 2488,605.2 2474,591.2 2470,587.9 2465,588 z"
       style="fill:#c4122f;fill-opacity:1" />
    <path
       d="M 2611,588 C 2610,588 2609,588.1 2609,588.2 2608,589.2 2599,597.2 2589,606.2 2566,629.2 2567,626.2 2589,648.2 2598,658.2 2606,666.2 2608,666.2 2610,667.2 2613,667.2 2616,666.2 2620,663.2 2649,634.2 2650,631.2 2652,625.2 2650,622.2 2633,605.2 2619,591.2 2615,587.9 2611,588 z"
       style="fill:#c4122f;fill-opacity:1" />
    <path
       d="M 2754,588.2 C 2753,589.2 2744,597.2 2734,606.2 2712,629.2 2712,626.2 2733,647.2 2741,656.2 2750,664.2 2752,665.2 2758,669.2 2760,668.2 2779,648.2 2796,631.2 2798,629.2 2795,623.2 2792,619.2 2762,589.2 2759,588.2 L 2754,588.2 z"
       style="fill:#c4122f;fill-opacity:1" />
  </g></a>
</g>

<script type="application/ecmascript"> <![CDATA[

!function() {
  var d3 = {
    version: "3.4.13"
  };
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
  try {
    d3_array(d3_documentElement.childNodes)[0].nodeType;
  } catch (e) {
    d3_array = function(list) {
      var i = list.length, array = new Array(i);
      while (i--) array[i] = list[i];
      return array;
    };
  }
  try {
    d3_document.createElement("div").style.setProperty("opacity", 0, "");
  } catch (error) {
    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
    d3_element_prototype.setAttribute = function(name, value) {
      d3_element_setAttribute.call(this, name, value + "");
    };
    d3_element_prototype.setAttributeNS = function(space, local, value) {
      d3_element_setAttributeNS.call(this, space, local, value + "");
    };
    d3_style_prototype.setProperty = function(name, value, priority) {
      d3_style_setProperty.call(this, name, value + "", priority);
    };
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n && !((a = c = array[i]) != null && a <= a)) a = c = undefined;
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    return j ? s / j : undefined;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    return numbers.length ? d3.quantile(numbers.sort(d3_ascending), .5) : undefined;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array) {
    var m = array.length, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m], array[m] = array[i], array[i] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object) {
    var map = new d3_Map();
    if (object instanceof d3_Map) object.forEach(function(key, value) {
      map.set(key, value);
    }); else for (var key in object) map.set(key, object[key]);
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatcher = d3_documentElement.matches || d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function(n, s) {
    return d3_selectMatcher.call(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3_selectionRoot;
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0) {
        prefix = name.slice(0, i);
        name = name.slice(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    } : function() {
      return this.ownerDocument.createElementNS(this.namespaceURI, name);
    };
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(function() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    });
  };
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues[i] = keyValue;
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3_selectionPrototype.transition = function() {
    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_selectionPrototype.interrupt = function() {
    return this.each(d3_selection_interrupt);
  };
  function d3_selection_interrupt() {
    var lock = this.__transition__;
    if (lock) ++lock.active;
  }
  d3.select = function(node) {
    var group = [ typeof node === "string" ? d3_select(node, d3_document) : node ];
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  var d3_selectionRoot = d3.select(d3_documentElement);
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  d3_selection_onFilters.forEach(function(k) {
    if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
  });
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect = "onselectstart" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;
  function d3_event_dragSuppress() {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect) {
      var style = d3_documentElement.style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        function off() {
          w.on(click, null);
        }
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
        svg = d3.select("body").append("svg").style({
          position: "absolute",
          top: 0,
          left: 0,
          margin: 0,
          padding: 0,
          border: "none"
        }, "important");
        var ctm = svg[0][0].getScreenCTM();
        d3_mouse_bug44083 = !(ctm.f || ctm.e);
        svg.remove();
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged && d3.event.target === target);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  function d3_behavior_dragTouchSubject() {
    return d3.event.target;
  }
  function d3_behavior_dragMouseSubject() {
    return d3_window;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 1e-6, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
    function interpolate(t) {
      var s = t * S;
      if (dr) {
        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      }
      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
    }
    interpolate.duration = S * 1e3;
    return interpolate;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: +_
      };
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      dispatch({
        type: "zoomend"
      });
    }
    function mousedowned() {
      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged && d3.event.target === target);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0], l = locations0[p.identifier];
            scaleTo(view.k * 2);
            translateTo(p, l);
            d3_eventPreventDefault();
            zoomed(dispatch);
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else translate0 = location(center0 = center || d3.mouse(this)), 
      d3_selection_interrupt.call(this), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var dispatch = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
      zoomstarted(dispatch);
      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
      translateTo(p, l);
      zoomed(dispatch);
      zoomended(dispatch);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ];
  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
  }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return d3.event.wheelDelta;
  }, "mousewheel") : (d3_behavior_zoomDelta = function() {
    return -d3.event.detail;
  }, "MozMousePixelScroll");
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/i.exec(format);
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g, color.b);
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  function d3_identity(d) {
    return d;
  }
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      f: false,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
      d3_timer_active = d3_timer_active.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.f) {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      } else {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = sx; else x2 = sx;
        if (bottom) y1 = sy; else y2 = sy;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransform(a, b) {
    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push("translate(", null, ",", null, ")");
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    } else {
      s.push("");
    }
    if (ra != rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(s.pop() + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + "rotate(" + rb + ")");
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + "skewX(" + wb + ")");
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + "scale(", null, ",", null, ")");
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + "scale(" + kb + ")");
    }
    n = q.length;
    return function(t) {
      var i = -1, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) alpha = x; else alpha = 0;
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, m = candidates.length, x;
        while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
    function pie(data) {
      var values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      });
      var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
      var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
      var index = d3.range(data.length);
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      var arcs = [];
      index.forEach(function(i) {
        var d;
        arcs[i] = {
          data: data[i],
          value: d = values[i],
          startAngle: a,
          endAngle: a += d * k
        };
      });
      return arcs;
    }
    pie.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return pie;
    };
    pie.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return pie;
    };
    pie.startAngle = function(x) {
      if (!arguments.length) return startAngle;
      startAngle = x;
      return pie;
    };
    pie.endAngle = function(x) {
      if (!arguments.length) return endAngle;
      endAngle = x;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, 
      Math.floor), e;
      return function(d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
      range = steps(start + Math.round(error / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function arc() {
      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0, 
      a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
      return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0" + "Z";
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.join("L");
  }
  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] + d3_svg_arcOffset;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  function d3_transition(groups, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection) {
    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, id, node.__transition__[id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node.__transition__[id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id;
    if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node.__transition__[id].tween.remove(name);
    } : function(node) {
      node.__transition__[id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node.__transition__[id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    return this.each("end.transition", function() {
      var p;
      if (this.__transition__.count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node.__transition__[id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node.__transition__[id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node.__transition__[id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      d3_transitionInheritId = id;
      d3_selection_each(this, function(node, i, j) {
        d3_transitionInherit = node.__transition__[id];
        type.call(node, node.__data__, i, j);
      });
      d3_transitionInherit = inherit;
      d3_transitionInheritId = inheritId;
    } else {
      d3_selection_each(this, function(node) {
        var transition = node.__transition__[id];
        (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = Object.create(node.__transition__[id0]);
          transition.delay += transition.duration;
          d3_transitionNode(node, i, id1, transition);
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id1);
  };
  function d3_transitionNode(node, i, id, inherit) {
    var lock = node.__transition__ || (node.__transition__ = {
      active: 0,
      count: 0
    }), transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        ease: inherit.ease,
        delay: inherit.delay,
        duration: inherit.duration
      };
      ++lock.count;
      d3.timer(function(elapsed) {
        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
        timer.t = delay + time;
        if (delay <= elapsed) return start(elapsed - delay);
        timer.c = start;
        function start(elapsed) {
          if (lock.active > id) return stop();
          lock.active = id;
          transition.event && transition.event.start.call(node, d, i);
          transition.tween.forEach(function(key, value) {
            if (value = value.call(node, d, i)) {
              tweened.push(value);
            }
          });
          d3.timer(function() {
            timer.c = tick(elapsed || 1) ? d3_true : tick;
            return 1;
          }, 0, time);
        }
        function tick(elapsed) {
          if (lock.active !== id) return stop();
          var t = elapsed / duration, e = ease(t), n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, d, i);
            return stop();
          }
        }
        function stop() {
          if (--lock.count) delete lock[id]; else delete node.__transition__;
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) define(d3); else if (typeof module === "object" && module.exports) module.exports = d3;
  this.d3 = d3;
}();

var bigData = 
"lodz,54481883.47,67234759.67,80850559.05,79591331.33,83213098.00,79463847.13,75207720.63,40221832.68,37017710.09,23331705.42,7484755.14,6444633.04,18467548.49,13045528.79,5527518.49,5804946.37,6179920.00,6366768.08,6341995.65,6450812.00,5068050.00,4500000.00,4640000.00,5256000.00,5119396.00,4835949.43,8083389.86,4190918.50,0,0,41533964.60,42816790.08,41762251.00,43127250.95,47379996.19,0,0,14795030.00,14028489.00,16483075.00,17239385.17,15562954.78,0,1209834.30,1589225.77,2834335.41,3081112.67,3968592.59,2737614.25,0,7030267.01,7509072.39,8163552.19,8137439.71,8427058.03,8298620.56,1953163.86,2166035.00,2801153.27,2535262.00,2457731.00,3457402.83,4082875.49,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,2728144.01,3230246.66,3315342.08,3541313.19,4401147.52,4956424.28,4769442.07,0,0,0.00,0.00,0.00,0.00,0.00,144770648.47,175640220.14,192999227.02,203426955.45,205160431.53,210549667.21,204972118.79,61261340.20,67537774.10,63799599.94,94621235.01,127781103.49,168453151.46,176419774.15,43181349.74,48827514.03,53378820.04,55722379.48,57035292.46,59811173.69,60548892.47,66326802.67,76990894.51,75777154.06,95376097.36,103766148.60,95778740.84,125225740.85,10566099.14,18409458.48,11651488.27,10485434.82,12163933.11,12482279.80,16593885.08,1850405.46,2299600.00,2314900.00,2652157.40,4623186.61,4543156.84,3991343.50,25860891.26,30941397.39,34743972.12,43911059.90,35880302.30,26839207.44,23161230.36,3604747.24,4370704.56,4942283.17,6171277.95,12853318.22,12656758.09,18693692.93,40804513.36,28690998.62,27153249.23,25996913.97,27963128.35,30637778.59,24121201.06,0,0,521286.16,575779.49,505764.14,452718.94,415554.95\n" +
"maz,152338000.9,177812581.96,162886365.78,138713176.26,155624668.22,143442983.49,129195189.98,104506501.87,58904450.46,77700846.81,26161844.74,55331523.96,34826874.55,34365090.03,19894550.14,25340607.51,17107907.26,16248092.42,16128894.13,14731430.65,20029805.86,68159.00,87497.00,0.00,0.00,0.00,0.00,0.00,0,0,53554980.53,45732045.00,49110471.86,44766866.84,37109331.19,0,0,0.00,0.00,0.00,0.00,0.00,0,882546.11,3506990.33,5396166.85,9467729.70,8532122.30,2209243.32,0,7790724.02,9514821.86,10203478.34,10359577.55,10789451.63,11634435.43,1612055.00,1750121.87,2630441.36,2831424.62,2496873.78,2584961.36,3244147.16,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1089849.62,1052557.00,1430686.00,1303874.00,1359544.07,1535580.00,2329515.20,2366941.36,2532226.00,3620738.17,3879547.35,6890317.52,7619405.02,3014108.62,0,0,0.00,0.00,0.00,0.00,0.00,488939607.39,594071256.83,615541964.57,632076370.04,619352921.82,609568623.70,602418212.05,115976614.22,207636614.33,323473528.30,392656979.09,171872395.76,129338077.22,132957956.48,141727465.19,169697941.70,177223746.24,187099702.79,175283898.88,173999235.91,182354882.03,151706803.33,234492158.70,363607213.19,412564977.80,241953029.58,225531533.45,230846196.14,54069691.94,73120529.01,43964263.60,69034357.44,42762235.06,40123712.06,23683272.93,1001651.00,1168000.00,1199640.00,1198217.00,1269908.50,1254000.00,1168832.88,96898978.00,119338655.79,123853798.26,110949979.48,98911519.14,90624870.98,93032726.91,11523071.57,11659464.02,10800725.72,25273816.34,15016372.60,15795557.16,14195491.35,33494034.68,43672703.68,55246853.29,71041062.75,91036520.38,65626270.00,76293707.03,0,0,27067755.66,15440259.64,17354738.81,15729678.94,14940961.08\n" +
"malo,72618462.52,86960527.54,110608685.88,94854414.83,92521759.10,92708307.65,98677612.63,24510051.51,75830690.05,121653940.26,21068152.03,15589887.30,25009409.04,24061658.37,9571399.50,12470979.40,8161247.60,6430100.00,6575875.00,8348567.46,7565825.00,8844796.40,10364395.81,27993532.67,16723991.13,13283242.18,13557039.99,15692456.28,0,0,51280895.81,31232202.25,33366991.80,38411005.71,33681370.87,0,0,13497746.70,12776506.99,13249475.38,12549100.00,12987499.00,0,483209.27,725104.11,2502551.75,1219553.11,983337.58,350968.27,0,6032892.69,7100624.36,7244025.83,7409070.46,9620129.29,8081059.26,1398949.85,1637556.70,1737319.22,1757363.00,1739316.00,1820649.00,1834120.00,478000.00,671979.96,570800.00,570343.17,550000.00,550000.00,683925.00,825706.60,706773.00,559850.92,638949.24,753000.00,796044.50,774798.16,437876.00,1079340.72,1004725.00,2291902.40,1091500.00,1126200.00,1304163.00,0,0,2000.00,2000.00,0.00,2000.00,0.00,222247068.89,275629456.63,307633764.67,317435842.20,327930548.22,323492399.63,323783240.58,61261643.96,48509729.38,107109173.16,176685473.25,100708565.03,92420373.68,135382050.01,60009404.69,65184537.58,69953463.20,76156367.36,77841510.47,80597768.16,84122935.08,94773583.74,108455789.06,121681431.58,134605042.68,131531213.61,136956697.74,136676398.62,28746317.41,14898096.19,35991152.61,57995713.40,35493664.50,16665722.39,19330029.09,2473600.00,3032606.00,3175000.00,3774370.00,3928020.00,3523714.75,4522542.78,19534335.34,24338490.00,25014463.36,22321960.41,22625850.00,23943092.11,24696712.68,3738442.00,4678140.00,5232046.00,7144937.00,6404886.00,5613149.00,6297265.32,25760645.73,32867295.13,44732729.44,69337799.75,49221269.88,36678382.82,35009801.98,0,0,7208577.43,6037426.98,6103729.14,5858126.91,5046559.20\n" +
"slaskie,92435408.34,113092804.39,123483843.40,116525967.06,130591421.47,134192194.24,118030923.90,23306794.55,27333406.47,41754969.82,4623916.03,23653947.91,59896848.02,58940099.55,12507981.43,14545863.73,14900791.79,14909609.00,15785682.00,16618080.24,16264646.13,3222734.84,3623935.75,3708898.41,4237938.87,4730475.15,6319228.88,4092164.73,0,0,36074672.81,32611803.11,36731474.28,39314463.64,32201643.25,0,0,12032234.56,12006928.00,11931476.00,11964981.00,11663599.32,0,1007627.27,4042677.82,20408988.86,16274536.91,5983060.88,2621994.66,0,4763480.03,5615144.46,6220570.50,5727980.64,5922522.85,6423510.89,1233895.13,1360613.56,1429780.38,1521593.26,1542071.00,1691434.00,1625187.00,720000.00,712000.00,824000.00,789500.00,630000.00,800000.00,734780.00,0.00,0.00,0.00,0.00,0.00,0.00,585690.00,1046511.03,1154901.00,1117792.79,1139773.00,1248873.00,1348363.40,1380682.00,0,0,0.00,0.00,0.00,0.00,0.00,337276123.72,372078305.47,402168402.35,426894194.11,434204926.37,447703915.28,450577407.64,100016330.35,78435340.55,122158859.39,139101170.34,104647804.06,153602833.49,217162885.52,127481554.74,125157700.51,126940668.24,127720253.88,130717336.70,134234688.66,134896479.98,146866932.63,145719487.12,164821549.19,171144811.52,158115282.17,171506206.16,189735021.95,11209227.75,17267929.60,31532432.04,32882079.68,15541518.02,15822041.34,11265157.81,5102109.31,5046918.54,5609067.07,5686280.84,5571398.97,5926056.26,5721305.22,36355401.28,34999360.47,34360146.90,29101795.87,29733793.75,32577119.76,32658020.06,9149743.75,13758281.18,17348229.02,23933870.84,31275138.34,31864845.62,31465853.30,26585688.21,30580586.33,36918686.95,38938135.50,39667452.77,33411512.43,46847716.57,0,0,13710624.97,34307187.72,30742202.75,69800492.49,123242601.02\n" +
"lub,40081083.7,42234958.53,62239809.59,50019949.76,48895665.54,45345257.24,42207919.35,3503374.65,1976752.24,4963116.73,2133306.30,9733815.06,14338680.31,48436009.80,6329321.00,6150000.00,7030010.13,6589560.24,6782060.00,7823449.46,6738593.00,3278282.14,2917505.24,3490154.21,2354000.00,3363748.00,3736119.09,2491500.00,0,0,14129622.62,14209363.80,14176752.46,15528678.76,14924049.90,0,0,4975062.04,5097397.80,5238314.01,5290000.00,5102625.00,0,1231978.15,178568.00,1103043.04,320042.94,734087.65,903755.39,0,6304398.64,6407829.06,8054166.54,7276821.84,6944553.94,7291055.30,1587903.90,1902894.56,1940825.00,2946498.47,2187598.72,2302406.04,2351188.87,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,3016670.99,3153779.95,3195818.00,3427574.51,3670291.44,3982306.87,4190605.59,0,0,45361.19,40217.43,34997.92,22000.00,23000.00,113616274.92,137602326.20,148249787.02,166434809.28,167857412.87,178366053.46,185131421.19,46307843.65,33212959.32,55503994.74,91610798.27,120736044.06,138179898.51,78428011.31,43199446.16,47320024.41,53756536.30,61049295.56,68949447.51,65544213.06,62897373.46,60721892.79,59230467.91,76046128.92,110696740.32,118491966.34,136062913.50,120717074.53,26153398.75,34190779.47,27194020.59,18040714.04,48473134.41,43710685.09,22224843.44,1124150.00,1280200.00,1339000.00,1391800.00,1659953.81,1675757.66,2135208.04,2950000.00,3490499.00,3495000.00,3375000.00,3460215.35,3379000.00,3267000.00,5438941.91,7816754.73,9189240.45,12345894.24,14840706.24,33553597.53,18942174.54,4022719.33,4617736.09,5040184.63,4908768.44,5025002.50,5267404.66,5356906.00,0,0,3033710.87,2969674.62,3438849.19,3504532.63,3210342.15\n" +
"podkar,33890095.07,43746054.98,47888173.78,53965774.52,48518747.25,50282641.92,48168775.48,9499609.96,15132715.88,12535478.31,11870029.59,5335940.36,8051859.06,14957293.28,5165069.42,6532419.00,7455226.63,6716432.20,7486231.68,7198747.94,6903109.24,4902781.00,6247216.92,5126021.09,5042452.08,4678390.49,5343332.40,5464386.61,0,0,4325319.08,4927342.12,4229432.00,4350826.38,4390457.53,0,0,10675748.84,12490276.75,6110000.00,9007160.01,6774112.58,0,40000.00,184826.00,1293779.65,404760.56,3024600.20,2940572.39,0,5883037.51,6561397.63,7635090.17,7710912.35,7579856.71,7496093.08,577978.15,694589.00,739009.00,763483.00,765637.00,760541.00,778210.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,305000.00,305000.00,314000.00,355944.00,370000.00,350000.00,339254.00,3625874.60,3795640.00,4143816.00,4371216.00,4933926.56,5080080.77,5041104.00,0,0,0.00,0.00,0.00,0.00,0.00,119294144.04,138198011.63,158860079.38,169427565.13,167873035.16,174432343.43,176518650.56,57807225.45,46627029.27,33706586.91,67072290.53,71023751.19,62591532.00,70708854.14,38188876.32,41879277.52,45570641.35,48751636.97,48190930.18,53316771.02,54822577.17,79328909.99,91309447.79,96627174.99,118204035.55,117363020.85,115709868.38,114313672.85,27620880.32,15388170.44,12282504.35,18245482.16,24063292.10,18625377.39,27333036.11,1255901.00,1361620.00,2068190.00,1645667.00,1754805.76,1797073.38,1919657.23,2365700.00,2604638.00,2981224.00,3344984.00,2814224.00,2989470.00,2938125.00,6832165.63,7143426.00,7800000.00,8395805.59,9744677.66,11161883.83,10130217.52,3655676.00,4584660.26,5428046.58,5214034.84,6345508.54,5925349.65,6228997.15,0,0,172824.49,1160084.48,117976.00,115000.00,115000.00\n" +
"podl,24677210.35,27444752.95,34712879.34,35760774.35,36116317.04,43161894.08,42710785.42,33465948.20,12052960.66,47762072.35,54903249.89,70185025.08,27507502.72,988560.00,5556222.04,7515104.38,7536351.00,7733906.00,7808964.00,7985700.00,7961560.00,4306250.00,3825086.00,4776790.00,4656750.35,4947784.08,5129000.00,4929000.00,0,0,4596000.00,4328500.00,4427500.00,4470000.00,4560000.00,0,0,6590861.35,6606365.58,7439450.00,13151727.00,13200000.00,0,107910.00,14197.00,375210.03,230137.67,714201.05,500245.00,0,1469314.06,1538468.10,1852931.36,1664620.59,1830448.00,4093380.09,240131.62,246598.25,277129.95,251003.75,243025.00,273946.78,261000.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,321864.00,432910.00,345300.00,614819.03,667608.95,653610.79,638665.00,0,0,0.00,0.00,0.00,0.00,0.00,63159151.25,70762096.40,80900481.91,95109413.50,95112517.07,103428737.82,107456449.45,18432895.23,15407256.15,26651836.47,51451097.45,55010209.46,51297249.74,29853974.49,18030950.00,20094205.43,21311955.14,23597728.41,25240891.01,26083344.63,26583589.68,38296325.91,38725311.29,48007057.98,71755049.78,63173918.48,63742856.30,59726467.24,2280481.18,2465268.00,5139324.17,9271109.14,10095614.29,4863806.81,5894235.48,1706695.67,1822000.00,2025500.00,2565000.00,3687711.58,4254550.45,5098000.01,4830895.00,6376447.00,6747488.00,6287711.00,8154576.92,8378639.00,6803044.00,519805.89,718804.20,2015256.77,3820194.28,8049253.01,1707953.12,1192000.00,4176631.40,5063159.54,6642235.35,9404224.36,7453939.00,6309438.16,7486222.29,0,0,1070000.00,1116427.46,1175500.00,1413652.00,2228814.00\n" +
"swieto,20530947.2,24642105.50,27840032.15,30533481.64,26767885.55,29299811.18,30441059.99,6876319.57,10302820.63,29376497.50,14933833.24,19679979.75,3968161.79,1284659.12,5482684.83,4422038.10,5100000.00,5295990.00,5256500.00,5338500.00,5325000.00,2698919.62,9578993.53,5622683.47,5369217.54,4296517.22,4540621.00,5340648.14,0,0,4078024.49,4600000.00,3930000.00,4100000.00,4430000.00,0,0,16392514.35,14677832.22,21451370.66,7986148.97,6240000.00,0,514948.28,455179.65,405360.52,1773531.79,1178457.59,494290.64,0,4544260.89,3883101.15,4851148.50,4711121.97,5247055.49,4368387.61,157290.87,160996.51,170993.42,187010.15,193627.15,181711.00,192295.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,2560455.37,2956715.40,2977451.27,3381623.36,4615937.99,4851074.82,2703260.00,0,0,0.00,0.00,0.00,0.00,0.00,58046587.01,66020626.88,77090086.41,87467223.96,89749871.17,94607628.96,93540987.97,11586018.62,17085728.28,26861677.60,71155667.45,54255206.29,37894606.61,44943499.16,19424089.34,21662720.56,24487589.39,26259786.18,29487861.97,28569437.12,28456129.52,28993685.44,39080277.51,38567576.39,59879922.48,57099944.27,58946690.62,57568127.21,1418476.39,2027547.33,3285953.35,13400018.07,9953047.47,4917693.21,6258983.36,1228708.07,1215200.00,1479900.00,1592400.00,1700474.00,1743787.81,6594721.54,1706994.00,1920499.17,2009000.00,2190686.00,2341646.00,2344268.32,2525299.31,6679159.05,6981254.51,13677464.25,18041018.74,14122825.52,13206361.62,9767653.21,3950609.08,3248682.37,4857258.20,3882777.68,4291356.26,4290919.96,4413346.98,0,0,76090.15,133746.56,91682.62,41324.86,48043.06\n" +
"lubus,17314461.88,19707965.93,21711924.49,22975763.03,23786609.89,24683556.32,25295194.65,8042094.55,2474372.00,30407228.25,5331808.95,503246.00,2212629.79,1841934.36,10991206.00,6138889.00,6743548.92,10132894.19,7352117.00,7971917.95,7800317.93,1798298.97,1511231.00,3427490.94,1849099.13,1577990.00,1661772.50,1770358.00,0,0,9617153.29,6655044.00,6160141.13,7098011.64,7319079.00,0,0,2935880.00,2894880.00,2990000.00,3136800.00,3194800.00,0,556532.86,80860.00,75000.00,8995.83,0.00,0.00,0,2470373.52,2944815.35,3532773.98,2941045.16,2895364.92,3012643.05,96499.33,101612.01,134993.40,132287.41,117570.72,144306.88,155831.93,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1338065.00,2378932.86,2081651.50,2090976.00,1789695.83,2009837.83,1944801.00,0,0,0.00,0.00,0.00,0.00,0.00,65958534.64,76953497.29,83477311.90,91032753.83,94607438.03,96242201.88,99251018.90,22148856.13,21278183.92,88735986.61,120086599.72,80381615.01,46509733.70,28927208.65,17376468.47,18243234.49,20720043.36,22847843.38,21508310.64,23145669.82,24785366.88,51463689.95,55862360.85,69952007.39,94025926.52,73655787.49,75083744.23,72055609.34,7209230.46,9115414.32,9398885.12,17161233.01,19546287.15,23056498.71,9729621.27,599297.71,670000.00,654475.00,718000.00,610000.00,627000.00,656000.00,0.00,290188.00,345000.00,0.00,0.00,0.00,0.00,1316340.45,3357546.75,57884428.40,61399500.88,47880789.54,7424015.42,8237583.05,1866788.38,2535084.69,4340821.25,2834570.38,2690192.45,2874610.95,3464570.26,0,0,0.00,0.00,0.00,100000.00,12874.10\n" +
"wielk,74828003.96,87686043.54,89088424.64,97280134.02,103238460.79,101475675.31,91038662.86,11684269.89,14679123.65,17420461.67,19609438.15,25632525.06,4968072.03,1349087.56,5622300.00,5250000.00,5668728.24,5649200.00,5764990.00,5305800.00,5340000.00,0.00,0.00,0.00,0.00,0.00,0.00,100000.00,0,0,44671872.39,49319755.96,54251797.37,42934690.15,39877868.00,0,0,12020000.00,12435000.00,13020000.00,11939820.00,11174000.00,0,172733.00,145110.67,293623.38,72195.00,892199.07,1824766.00,0,10299639.40,10450572.33,11567685.42,10982349.47,10935645.87,10936645.19,3106177.00,3101680.00,3338897.00,3401644.00,3403467.00,3554784.61,3527800.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1620062.00,1748537.00,1860848.67,2073219.98,2202297.73,1933411.07,2053118.00,0,0,40585.10,95492.69,92157.97,69666.77,70084.18,225357501.69,255747694.25,276489108.77,308422648.44,313417175.01,310060074.43,322455801.66,40860984.05,45427137.44,53110218.69,101212954.26,125964750.86,123486398.74,147204233.99,74207410.77,83289888.86,86359972.28,91943424.87,118193250.71,93430210.90,109195723.37,100673788.91,107343823.93,126101551.15,175238768.66,173086514.64,180070199.59,186200380.41,12962823.83,13462621.90,13331661.10,14925027.03,15908683.26,8291535.60,9281126.53,1653134.14,1739325.00,1856876.00,2148630.00,2651662.00,2111140.00,2249930.00,14211647.10,15219590.50,16187330.99,17189459.93,20604080.08,14895372.24,16036659.81,13309236.07,16961602.36,12552099.57,15190026.14,20351636.58,34432260.50,17819567.16,17655453.26,20917136.31,19520227.98,18287172.41,19891040.62,21663059.36,25415518.88,0,0,4936491.64,4503327.84,5093366.42,4856549.63,5179791.28\n" +
"zachpom,29425093.86,31527176.56,35761972.89,39551438.32,39997097.26,43426290.26,47070786.87,1993386.64,4435869.46,6300208.02,6800014.64,9624372.13,9768147.99,7115998.33,7313075.56,10387361.67,11317031.00,11210143.33,10637400.00,11481707.00,11788673.00,6654630.08,5724172.00,8713354.51,8334353.66,7269390.00,7641227.11,8117085.55,0,0,13506158.51,16353836.54,21106976.71,19388583.11,18655693.30,0,0,0.00,300000.00,300000.00,300000.00,300000.00,0,117492.56,365118.97,848727.08,1162793.62,1088999.51,131035.00,0,2268408.33,3441617.19,6256699.67,3930550.52,3428648.91,3417979.58,272544.00,396400.00,617870.00,708600.00,755960.00,656600.00,682335.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,870000.00,974500.00,1300000.00,1224827.00,1450693.62,2247999.51,1118590.89,0,0,0.00,0.00,0.00,0.00,0.00,122135980.78,140041768.25,159401251.40,176731206.05,173300953.14,179794668.83,186977924.01,46813839.80,50716055.18,68148208.21,91651005.75,80052185.01,108683345.04,125154326.66,32087841.17,34644911.61,39250494.76,41300328.65,42440187.49,44425050.87,47641951.51,69549325.33,76461194.31,91304847.51,137625098.15,108823643.93,119093863.80,123018533.74,6902202.13,10345577.62,19241225.45,10927338.05,11197714.29,14142026.05,16019556.31,330000.00,378000.00,0.00,0.00,0.00,0.00,0.00,13834646.06,16596978.87,14189877.30,16393000.00,16722495.16,12372687.77,12488559.87,0.00,1034192.73,3569797.16,4440995.94,5132289.20,13109993.45,10643081.04,5523125.37,7608178.96,14825317.31,17570307.99,8176724.01,8611013.90,8608024.46,0,0,12190798.44,11841755.89,32977227.86,45804529.82,64704786.08\n" +
"dolno,63168399.87,76361048.52,77569570.35,74644078.03,76788256.01,79610904.93,81150537.70,10464685.87,11865422.63,15186934.19,14725016.15,10776348.68,16773142.96,17689279.26,3369430.44,4440016.37,3689600.00,4008336.55,4141309.69,4339560.00,5549425.00,3797379.00,6141558.86,5840397.67,6198136.00,6284536.00,7308210.00,6335831.00,0,0,33639114.78,32127171.17,31097594.47,38560862.58,31879360.57,0,0,14281203.54,14346374.05,14350958.89,14395172.28,14643809.66,0,142800.00,126500.00,50000.00,100000.00,339999.70,369598.08,0,6316393.28,5267092.57,4310999.80,3651736.89,3733805.95,2628036.46,1974712.01,2229352.73,2021060.00,851302.00,857258.00,882653.00,719899.00,1150000.00,1221350.00,1200425.00,1022000.00,1000000.00,1066740.00,0.00,226134.25,0.00,0.00,0.00,0.00,0.00,0.00,378000.00,614000.00,621436.81,656037.74,630295.20,611000.00,659000.00,0,0,0.00,0.00,0.00,0.00,0.00,262805321.88,316528680.48,346691345.30,354990502.26,356300268.09,370765798.23,386190425.60,115335664.34,130339773.63,148953619.21,199941768.15,165246767.93,229118539.66,270114323.95,66738529.35,75800865.49,76907846.96,79153638.36,78651957.97,82331129.92,84065253.49,125668523.39,128561981.85,168425475.58,214130465.16,189020724.25,187836202.14,192353948.61,41135061.24,50264825.59,47820153.03,53223274.18,60727241.98,50315553.63,54351843.54,4106403.55,4452181.13,6392358.13,4728616.48,5446137.01,4738490.62,6881183.33,29451330.31,32546997.22,31841359.27,25821201.92,30813674.91,72764954.77,118170527.33,16448668.78,39086144.31,25949841.46,16429951.29,18549455.18,14069047.64,15956002.45,29885864.84,35840401.89,28874697.20,29402125.39,28902384.13,25314491.85,28986924.51,0,0,15632338.90,49899797.68,16864242.21,62339020.49,47841798.35\n" +
"opol,23403842.11,27616116.28,32177758.01,34018548.26,31245981.98,27328333.11,23972562.85,14874947.61,6319869.21,6134739.37,3203833.33,2179009.89,2315487.87,308864.11,4288000.00,5362945.61,6438500.00,6142480.00,5645000.00,4625000.00,4707364.00,0.00,41224.00,0.00,0.00,0.00,0.00,0.00,0,0,7076461.74,7154210.96,6724000.00,6188000.00,5620000.00,0,0,8150957.78,9778311.02,11102141.21,10692487.87,7164880.11,0,8000.00,4500.00,3784889.75,143677.70,3241463.52,2910198.58,0,2289520.32,2382612.86,3012936.99,2383731.73,2550880.48,3128406.13,265029.00,275442.79,287754.00,298409.00,254337.87,279684.57,285617.78,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,472414.02,1031690.95,1209000.00,1254000.00,1791320.11,1387200.00,1496442.00,1690349.73,0,0,0.00,0.00,0.00,0.00,0.00,68380266.70,80829651.79,91297429.57,98150365.39,97508983.15,100161982.75,102589051.84,21500309.66,23104367.06,31067036.68,74703838.63,43053905.88,31585830.72,31379083.06,18941132.43,21060033.64,22778405.23,25871588.97,23979791.13,24950368.38,26589328.02,39831728.12,48609078.90,62034578.39,89232854.77,77723658.25,69182991.24,63984752.38,11846411.47,15894502.03,12335538.75,22910919.32,15695681.29,16996379.06,7394150.53,1840920.38,1804782.29,2457898.61,3924116.77,2069295.00,2374496.79,2344467.05,7439715.55,6608439.57,3742299.70,3623150.00,3947000.00,3827000.00,6769720.55,0.00,0.00,32574.00,0.00,0.00,0.00,0.00,903425.15,1263000.34,3715881.32,2898910.50,4467898.18,2300356.05,9289273.05,0,0,56884.54,35170.69,35062.71,45102.72,29308.36\n" +
"kujpom,55421107.14,59389330.58,67670269.64,82292296.32,78883132.92,79770197.61,82684216.67,7722137.08,4788751.70,5319983.38,3501833.48,2088148.72,4948093.46,7492705.58,12343671.48,13615999.02,14681641.98,16637650.00,17203868.28,16555451.85,17550965.26,4870089.99,6274073.60,6404019.40,6998444.87,5981846.32,6363672.00,7153039.34,0,0,21595838.77,23991790.05,23981730.04,24400242.33,23812171.14,0,0,6737000.00,8050000.00,7770552.69,7417953.96,7861641.75,0,132819.50,1379650.36,357805.71,314139.99,10482.03,61412.01,0,2094677.30,3091309.48,3084196.16,3192107.59,2857758.78,2529728.23,628005.05,606080.96,689539.98,756839.56,800365.00,761205.00,780723.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,532123.65,633519.31,912034.01,1140841.34,906820.32,869507.84,691034.72,0,0,5000.00,5200.00,3800.00,5600.00,4500.00,111543834.45,125547969.62,139026963.89,154493059.73,159871947.92,166572191.18,170847903.66,62658038.81,52648345.21,51154131.94,103859161.67,91397313.75,64223636.16,37800078.07,28562028.83,32381860.41,35888228.69,38127378.30,40094415.99,39348348.66,41630631.25,46299503.09,51272464.31,62974500.16,95577843.92,92936074.57,88614087.94,88605815.98,20113780.64,32091835.66,24356649.67,37958569.65,33366630.25,36066464.73,11070135.29,2022276.49,2035971.03,2179360.00,2184360.00,2059360.00,2069360.00,2069360.00,14346330.59,7663934.55,8155954.27,8785729.56,8376247.84,8514478.48,8240864.49,34379643.81,15308605.48,17267876.08,11712703.47,13935851.36,12755274.58,10448851.71,11087472.73,14172598.65,18441345.31,28132501.36,24151572.75,17482566.13,18419831.02,0,0,2878552.44,3206937.98,3614348.94,3418351.85,3697683.16\n" +
"pom,49750371.95,59843387.93,69256548.65,72413903.09,81725790.14,81052850.13,72902607.46,15930066.99,23055539.17,35079715.23,15359645.23,10792820.39,7231512.08,10514286.81,3660600.00,6047357.00,9128672.66,4288000.00,4840000.00,8715000.00,6743500.00,0.00,0.00,0.00,87320.82,309259.16,688756.37,356334.67,0,0,44868155.61,39614764.97,38720457.91,36720935.28,39120563.75,0,0,9475072.96,9817780.72,10090000.00,8832002.47,7895600.00,0,347425.50,437582.24,1152907.99,942460.00,520166.80,1783749.89,0,5689394.51,5478795.39,6078304.60,6108701.86,6628519.70,5763051.92,757609.45,823731.00,862965.00,893740.50,865518.00,784968.92,754163.48,0.00,0.00,0.00,0.00,0.00,0.00,0.00,30000.00,33500.00,20000.00,72000.00,68800.00,67000.00,118809.00,2176000.00,3143720.50,2901382.24,2920441.00,3050888.00,2940558.95,2910244.00,0,0,0.00,0.00,0.00,0.00,0.00,156832281.87,189972705.04,212872823.49,230242284.57,239431203.47,256102028.03,260394516.38,36295683.88,58584656.10,67081657.80,102589731.70,144029844.83,148505123.27,124225052.86,41092775.37,44187752.82,50011987.48,50428773.06,52135466.52,55014638.85,55635176.43,55094733.35,62449236.42,77078209.54,87366145.75,94693388.72,124844335.30,91080323.32,14494824.30,12692580.45,10988648.37,19924869.90,16487393.31,13200151.93,8143855.18,1952526.00,1850746.01,3804233.78,13611621.94,7822702.07,5558068.79,7288273.11,10916373.00,17179483.51,19355109.06,20168846.38,22551263.32,21770930.56,26304286.87,4617963.62,4239998.42,5340467.75,5550439.21,5023215.24,13599609.65,7758793.12,21093376.85,20225921.87,19721478.52,19477258.09,19512806.04,20341981.57,31875053.67,0,0,7861115.70,8015426.74,8991259.35,8641542.41,8612365.85\n" +
"warmaz,27593498.98,31291444.11,37982087.46,40003692.55,38408409.19,38665342.55,39359259.60,10032797.18,9155957.08,15860361.21,22300010.92,20295256.84,16733628.75,11240141.58,3146156.16,3092267.80,3460109.00,4106294.00,5164872.72,3845094.00,4774463.00,4785920.09,5957967.54,8206040.00,9772136.47,6099497.00,6578959.88,6642104.02,0,0,10269274.20,17527636.00,22396588.93,23260801.86,15135698.00,0,0,8110914.05,12560628.72,7989532.29,6971025.08,7046187.90,0,39000.00,323485.00,0.00,379805.53,23000.00,334871.48,0,1562032.73,1750375.38,2213248.22,2511789.15,1907297.88,2018367.56,310872.22,364280.00,417440.00,447442.00,393992.00,392199.00,629091.75,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,713400.00,330000.00,411485.00,540000.00,546243.00,352000.00,663527.00,0,0,0.00,0.00,0.00,0.00,0.00,84338661.65,96956404.35,107635803.25,114778913.20,113801705.94,118594958.17,121289892.79,29358474.01,26721256.08,17570078.53,68394876.82,54192266.01,47254682.42,29689838.46,31142192.16,33186814.00,35151106.60,36407313.04,36892776.43,38687495.43,39431281.53,37688985.62,46301238.45,51514167.62,76006173.66,68902339.73,69907728.30,67770360.27,12359897.85,15264143.33,8482325.48,12053597.51,12275438.50,10320540.69,8004386.20,1706237.59,1759850.40,1846746.00,2684334.63,2444401.00,1965393.19,2070397.00,2148350.00,2638300.00,3064800.00,2755040.00,2712185.00,2512185.00,2482000.00,4365431.00,8044510.79,9174606.84,9453132.86,13205956.38,9779171.62,13113255.17,2310855.66,2346521.00,2405351.27,2724540.93,3861635.52,5803387.95,4087134.79,0,0,683300.00,833798.10,1151261.19,1394361.00,2045264.00";


panstwa = {
	"bud": "State",
	"woj": "Voivodships",
	"pow": "County",
	"gmin": "Communes"
};
banki = {
	"kinemato": "Cinematography",
	"pisf": "PISF",
	"teatry": "Theatres",
	"filh": "Music ensables",
	"domykult": "Houses of Culture",
	"galerie": "Galleries",
	"centrakult": "Centres of culture and art",
	"biblio": "Libraries",
	"muz": "Museums",
	"osrodki": "Centres of heritage",
	"ochrona": "Heritage Protection",
	"archiwa": "Archives",
	"maj": "Capital",
	"biez": "Current"
};
bankiDlugie = {
	"gmin": [
		"",
		"Communes budget",
		""
	],
	"pow": [
		"",
		"County budgets",
		""
	],
	"woj": [
		"",
		"Voivodships budget",
		""
	],
	"bud": [
		"",
		"State budget",
		""
	],
	"": [
		"",
		"Total",
		""
	],
	"kinemato": [
		"",
		"Cinematographic institutions",
		 "(chapter 92101)"
	],
	"pisf": [
		"",
		"Polish Film Institute",
		 "(chapter 92102)"
	],
	"teatry": [
		"",
		"Theatres",
		"(chapter 92106)"
	],
	"filh": [
		"Philharomnies, orchestras,",
		"choirs & ensambles",
		"(chapter 92108)"
	],
	"domykult": [
		 "Culture houses & centres,",
		 "common-rooms & clubs",
		 "(chapter 92109)"
	],
	"galerie": [
		"Galleries and artistic",
		"exhibitions offices",
		 "(chapter 92110)"
	],

	"centrakult":[
		"",
		"Centres of culture and art",
		"(chapter 92113)"
	],
	"biblio": [
		"",
		"Libraries",
		"(chapter 92116)"
	],
	"muz": [
		"",
		"Museums",
		"(chapter 92118)"
	],
	"osrodki": [
		"Centres of monuments'",
		"protection & documentation ",
		"(chapter 92119)"
	],
	"ochrona": [
		"Monuments protection",
		"and conservation",
		"(chapter 92120)"
	],
	"archiwa": [
		"",
		"Archives",
		"(chapter 92117)"
	],
	"maj": [
		"",
		"",
		"Capital spending"
	],
	"biez": [
		"",
		"Current spending",
		"of budget entities"
	]
}

var jestWlaczony = {};
var jestWlaczonyKraj = {};

var klasy = {};

var chart = d3.select(".klocki");
var calosc = d3.select(".chart");

var tloX=620,tloY=100;

var data;
var ramki = d3.select(".ramki");
var przelacznik = false;

var txt = calosc.select(".opowiesc");
var suma = {};
var pokazujeBank = false;
var jakiBank;
var jakiKraj;

d3.selectAll('#logo g').attr("style","opacity:0");

pokaz = function(co, rodzaj) {
	if (rodzaj === "kraj") {
		if (jakiKraj === co) {
			pokazujeKraj = false;
			jakiKraj = undefined;
				
			drawGraph(dat[currentYear][currentScope][type]);

			return ;
		}
		

		pokazujeKraj = true;

		jakiKraj = co;

		drawGraph(dat[currentYear][currentScope][type]);

		return;
	}


	if (jakiBank === co) {
		pokazujeBank = false;
		jakiBank = undefined;
				
		drawGraph(dat[currentYear][currentScope][type]);

		return ;
	}
	for (obj in jestWlaczony) {
		if (jestWlaczony[obj])
			return;
	}

	pokazujeBank = true;
	jakiBank = co;
	drawGraph(dat[currentYear][currentScope][type]);

}


	dat = [];

	dat[2013] = {};
	dat[2013].krajowe = {};

	dat[2013].krajowe.majbiez = 
"biez,6017587.239,4,P,bud,1083957,W,woj,1048113.816,POW,pow,91121.40034,G,gmin,3794395.023\n" +
"maj,2122829.662,4,P,bud,168673,W,woj,253631.1965,POW,pow,20174.31496,G,gmin,1680351.151\n";

	dat[2013].krajowe.inst =
"kinemato,11196,1,P,bud,11196\n" +
"pisf,14943,1,P,bud,14943\n" +
"teatry,913675,4,P,bud,172584,W,woj,360097.2827,POW,pow,1418.705,G,gmin,379574.7772\n" +
"filh,469073,4,P,bud,56792,W,woj,130811.7101,POW,pow,97.58418,G,gmin,281371.7466\n" +
"domykult,1997058,3,P,bud,4504,W,woj,72675.82684,G,gmin,1919878.423\n" +
"galerie,69246,2,P,bud,14535,G,gmin,54711.22169\n" +
"centrakult,410568,3,P,bud,211286,POW,pow,4620.48038,G,gmin,194661.4819\n" +
"biblio,1333585,4,P,bud,107912,W,woj,140111.2974,POW,pow,21904.48596,G,gmin,1063657.572\n" +
"muz,766219,3,P,bud,395542,POW,pow,34772.69562,G,gmin,335904.2297\n" + 
"osrodki,32145,1,P,bud,32145\n" +
"ochrona,360643,2,P,bud,104065,G,gmin,256578.1182\n" +
"archiwa,141914,1,P,bud,141914\n";

	dat[2012] = {};
	dat[2012].krajowe = {};
	
	dat[2012].krajowe.majbiez = 
"biez,6055810.508,4,P,bud,1085827.278,W,woj,1103755.278,POW,pow,92120.68942,G,gmin,3774107.262\n" +
"maj,2112410.497,4,P,bud,173720.539,W,woj,259330.7573,POW,pow,31515.8834,G,gmin,1647843.317\n";

	dat[2012].krajowe.inst =
"kinemato,11058.64,1,P,bud,11058.64,,,,,,,,,\n" +
"pisf,15639.50,1,P,bud,15639.5,,,,,,,,,\n" +
"teatry,898852.75,4,P,bud,169576.576,W,woj,396154.8102,POW,pow,2438.49066,G,gmin,330682.8759\n" +
"filh,425538.70,4,P,bud,57770.295,W,woj,142141.6277,POW,pow,100.1601709,G,gmin,225526.6196\n" +
"domykult,2022816.95,3,P,bud,9034.586,W,woj,77643.89104,G,gmin,1936138.477,,,\n" +
"galerie,60979.97,2,P,bud,16420.466,G,gmin,44559.50496,,,,,,\n" +
"centrakult,421485.64,3,P,bud,185906.232,POW,pow,2773.362121,G,gmin,232806.0441,,,\n" +
"biblio,1301358.57,4,P,bud,109372.573,W,woj,138570.8319,POW,pow,20714.21908,G,gmin,1032700.951\n" +
"muz,783449.90,3,P,bud,445821.605,POW,pow,42456.92716,G,gmin,295171.3707,,,\n" +
"osrodki,29853.28,1,P,bud,29853.283,,,,,,,,,\n" +
"ochrona,436983.24,2,P,bud,104416.365,G,gmin,332566.8727,,,,,,\n" +
"archiwa,138865.64,1,P,bud,138865.643,,,,,,,,,\n";

	dat[2011] = {};
	dat[2011].krajowe = {};

	dat[2011].krajowe.majbiez = 
"biez,6005588.548,4,P,bud,940809.2706,W,woj,1147119.247,POW,pow,92809.27408,G,gmin,3824850.756\n" +
"maj,2141547.206,4,P,bud,138765.7288,W,woj,301183.2712,POW,pow,37558.61797,G,gmin,1664039.588\n";

	dat[2011].krajowe.inst =
"kinemato,9263.186049,1,P,bud,9263.186049,,,,,,,,,\n" +
"pisf,14093.05918,1,P,bud,14093.05918,,,,,,,,,\n" +
"teatry,901877.5569,4,P,bud,165255.7414,W,woj,410344.7653,POW,pow,2281.00594,G,gmin,323996.0443\n" +
"filh,343752.3176,4,P,bud,52971.65446,W,woj,156443.887,POW,pow,137.0234693,G,gmin,134199.7527\n" +
"domykult,2035962.369,3,P,bud,8173.953396,W,woj,70793.4521,G,gmin,1956994.964,,,\n" +
"galerie,61679.25475,2,P,bud,12188.73312,G,gmin,49490.52163,,,,,,\n" +
"centrakult,425864.5573,3,P,bud,175856.141,POW,pow,2669.555495,G,gmin,247338.8608,,,\n" +
"biblio,1325451.153,4,P,bud,92208.09563,W,woj,139074.1461,POW,pow,19958.12002,G,gmin,1074210.791\n" +
"muz,794088.4479,3,P,bud,394240.4867,POW,pow,41313.13665,G,gmin,358534.8245,,,\n" +
"osrodki,30530.95061,1,P,bud,30530.95061,,,,,,,,,\n" +
"ochrona,467398.53,2,P,bud,65866.66235,G,gmin,401531.8677,,,,,,\n" +
"archiwa,124272.9704,1,P,bud,124272.9704,,,,,,,,,\n";

	dat[2010] = {};
	dat[2010].krajowe = {};

	dat[2010].krajowe.majbiez = 
"biez,6194560.737,4,P,bud,973070.3988,W,woj,1160236.754,POW,pow,102892.1245,G,gmin,3958361.46\n" +
"maj,2535533.655,4,P,bud,110949.5886,W,woj,255381.7885,POW,pow,44615.98733,G,gmin,2124586.29\n";

	dat[2010].krajowe.inst =
"kinemato,9289.361115,1,P,bud,9289.361115,,,,,,,,,\n" +
"pisf,16161.43665,1,P,bud,16161.43665,,,,,,,,,\n" +
"teatry,922206.6762,4,P,bud,167223.7786,W,woj,407285.0711,POW,pow,2599.365757,G,gmin,345098.4607\n" +
"filh,370281.751,4,P,bud,55885.67826,W,woj,161370.7509,POW,pow,155.9614323,G,gmin,152869.3605\n" +
"domykult,2437689.208,3,P,bud,14757.99229,W,woj,83751.83751,G,gmin,2339179.378,,,\n" +
"galerie,65603.4632,2,P,bud,10485.45366,G,gmin,55118.00954,,,,,,\n" +
"centrakult,454643.2163,3,P,bud,201811.152,POW,pow,2587.278314,G,gmin,250244.786,,,\n" +
"biblio,1341191.67,4,P,bud,91420.32197,W,woj,144562.906,POW,pow,22136.33661,G,gmin,1083072.105\n" +
"muz,828475.8359,3,P,bud,408166.5826,POW,pow,38289.62028,G,gmin,382019.6331,,,\n" +
"osrodki,48483.21862,1,P,bud,48483.21862,,,,,,,,,\n" +
"ochrona,511369.6574,2,P,bud,54715.77752,G,gmin,456653.8799,,,,,,\n" +
"archiwa,121187.3114,1,P,bud,121187.3114,,,,,,,,,\n";

	dat[2009] = {};
	dat[2009].krajowe = {};

	dat[2009].krajowe.majbiez = 
"biez,6099833.696,4,P,bud,988401.542,W,woj,1211211.614,POW,pow,92865.26774,G,gmin,3807355.273\n" +
"maj,2150539.092,4,P,bud,146910.2093,W,woj,549535.5037,POW,pow,15182.65414,G,gmin,1438910.725\n";

	dat[2009].krajowe.inst =
"kinemato,6404.682726,1,P,bud,6404.682726,,,,,,,,,,\n" +
"pisf,11709.82027,1,P,bud,11709.82027,,,,,,,,,,\n" +
"teatry,978698.8479,4,P,bud,164117.7555,W,woj,442077.0772,POW,pow,2905.872855,G,gmin,369598.1425,\n" +
"filh,321695.9311,4,P,bud,55360.19639,W,woj,157508.4209,POW,pow,104.0719402,G,gmin,108723.2418,\n" +
"domykult,2011521.622,3,P,bud,15000.61792,W,woj,99166.63892,G,gmin,1897354.365,,,,\n" +
"galerie,52617.09383,2,P,bud,9617.101387,G,gmin,42999.99244,,,,,,,\n" +
"centrakult,465418.2988,3,P,bud,235766.2245,POW,pow,2602.783472,G,gmin,227049.2908,,,,\n" +
"biblio,1343972.242,4,P,bud,118586.2837,W,woj,150710.7908,POW,pow,22502.79787,G,gmin,1052172.369,\n" +
"muz,747516.2577,3,P,bud,379215.4418,POW,pow,34782.15406,G,gmin,333518.6618,,,,\n" +
"osrodki,23830.57036,1,P,bud,23830.57036,,,,,,,,,,\n" +
"ochrona,475897.2917,2,P,bud,120956.6881,G,gmin,354940.6036,,,,,,,\n" +
"archiwa,123805.2044,1,P,bud,123805.2044,,,,,,,,,,\n";

	dat[2008] = {};
	dat[2008].krajowe = {};

	dat[2008].krajowe.majbiez = 
"biez,5877700.424,4,P,bud,1049790.275,W,woj,1131760.899,POW,pow,89012.91063,G,gmin,3607136.34\n" +
"maj,1629347.871,4,P,bud,185842.9599,W,woj,365428.3946,POW,pow,8106.264487,G,gmin,1069970.252\n";

	dat[2008].krajowe.inst =
"kinemato,3303.993307,1,P,bud,3303.993307,,,,,,,,,,\n" +
"pisf,21615.60265,1,P,bud,21615.60265,,,,,,,,,,\n" +
"teatry,542143.7312,3,P,bud,165088.412,POW,pow,3019.288934,G,gmin,374036.0303,,,,\n" +
"filh,57223.63435,1,P,bud,57223.63435,,,,,,,,,,\n" +
"domykult,1679326.821,3,P,bud,13075.74763,W,woj,77570.08782,G,gmin,1588680.985,,,,\n" +
"galerie,47071.76481,2,P,bud,10083.49553,G,gmin,36988.26928,,,,,,,\n" +
"centrakult,348543.2025,3,P,bud,177888.344,POW,pow,2431.152676,G,gmin,168223.7058,,,,\n" +
"biblio,1357094.174,4,P,bud,154683.9041,W,woj,158903.1823,POW,pow,20649.07155,G,gmin,1022858.016,\n" +
"muz,724147.7617,3,P,bud,390848.1539,POW,pow,34034.2246,G,gmin,299265.3831,,,,\n" +
"osrodki,26187.42082,1,P,bud,26187.42082,,,,,,,,,,\n" +
"ochrona,515496.2898,2,P,bud,125067.33,G,gmin,390428.9598,,,,,,,\n" +
"archiwa,136145.1525,1,P,bud,136145.1525,,,,,,,,,,\n";

	dat[2007] = {};
	dat[2007].krajowe = {};

	dat[2007].krajowe.majbiez = 



"biez,5231819.218,3,P,bud,1033534.732,W,woj,1004641.226,G,gmin,3193643.26,,,\n" +
"maj,1543835.698,3,P,bud,125847.3459,W,woj,394431.9972,G,gmin,1023556.355,,,\n";

	dat[2007].krajowe.inst =
"kinemato,2038.365701,1,P,bud,2038.365701,,,,,,,,,,\n" +
"pisf,20421.09145,1,P,bud,20421.09145,,,,,,,,,,\n" +
"teatry,515317.1889,3,P,bud,170920.8282,POW,pow,2835.357029,G,gmin,341561.0037,,,,\n" +
"filh,51378.16674,1,P,bud,51378.16674,,,,,,,,,,\n" +
"domykult,1512513.787,3,P,bud,6666.953218,W,woj,64880.21556,G,gmin,1440966.618,,,,\n" +
"galerie,46835.33594,2,P,bud,10663.98549,G,gmin,36171.35045,,,,,,,\n" +
"centrakult,261715.1083,3,P,bud,111494.2566,POW,pow,2990.75883,G,gmin,147230.0928,,,,\n" +
"biblio,1287815.44,4,P,bud,154718.9605,W,woj,145836.3551,POW,pow,19529.68857,G,gmin,967730.4362,\n" +
"muz,682154.0059,3,P,bud,371157.6541,POW,pow,29903.69302,G,gmin,281092.6588,,,,\n" +
"osrodki,288274.1786,1,P,bud,288274.1786,,,,,,,,,,\n" +
"ochrona,493262.5277,2,P,bud,144169.6935,G,gmin,349092.8342,,,,,,,\n" +
"archiwa,116246.0155,1,P,bud,116246.0155,,,,,,,,,,\n";

	var inflacja = [];
	inflacja[2013] = 1;
	inflacja[2012] = 1.009;
	inflacja[2011] = 1.046333;
	inflacja[2010] = 1.091325319;
	inflacja[2009] = 1.119699777;
	inflacja[2008] = 1.158889269;
	inflacja[2007] = 1.207562619;

	var wojewodztwa = {
		'krajowe': '',
		'zachpom': 'Zachodniopomorskie',
		'pom': 'Pomorskie',
		'warmaz': 'Warmińsko-mazurskie',
		'lubus': 'Lubuskie',
		'podl': 'Podlaskie',
		'wielk': 'Wielkopolskie',
		'kujpom': 'Kujawsko-pomorskie',
		'maz': 'Mazowieckie',
		'lodz': 'Łódzkie',
		'lub': 'Lubelskie',
		'dolno': 'Dolnośląskie',
		'swieto': 'Świętokrzyskie',
		'podkar': 'Podkarpackie',
		'opol': 'Opolskie',
		'slaskie': 'Śląskie',
		'malo': 'Małopolskie'
	};

	var kolejnosc = [ ['woj','biez'] , ['woj','maj'], ['woj', 'biblio'], ['woj', 'domykult'], ['woj', 'teatry'], ['woj', 'filh'],['pow', 'maj'], ['pow', 'biez'], ['pow', 'biblio'], ['pow', 'teatry'], ['pow', 'centrakult'], ['pow', 'muz'], ['pow', 'filh'], ['gmin', 'biez'], ['gmin', 'maj'], ['gmin', 'biblio'], ['gmin', 'domykult'], ['gmin', 'ochrona'], ['gmin', 'galerie'], ['gmin', 'teatry'], ['gmin', 'centrakult'], ['gmin', 'muz'], ['gmin', 'filh'] ];

	var konotacje = {
		woj: 'W',
		pow: 'POW',
		gmin: 'G'
	};



	var kobyla = d3.csv.parseRows(bigData);

	function findKey(arr, key) {
		var found = false;
		arr.forEach(function (innerArr) {
			if (innerArr[0] === key)
				found = innerArr;
		});

		return found;
	}

	function przetworzDane () {
		kobyla.forEach(function (linijka) {
			var j = 1;
			kolejnosc.forEach(function (el) {
				var type = (el[1] === "maj" || el[1] === "biez") ? 'majbiez' : 'inst';

				for (var i = 2007; i <= 2013; i++) {
					if (!dat[i][ linijka[0] ]) 
						dat[i][ linijka[0] ] = {};
					if (!dat[i][ linijka[0] ][ type ] )
						dat[i][ linijka[0] ][ type ] = [];

					var arr = dat[i][ linijka[0] ][ type ];
					if (!arr)
						arr = [];
					var helperArr = findKey(arr, el[1]);
					var isNew = !helperArr;
					if (isNew)
						helperArr = [];

					helperArr[0] = el[1];

					var number = linijka[ j++ ] * inflacja[i] / 1000;

					if (isNaN(helperArr[1]))
						helperArr[1] = 0;

					helperArr[1] += number;

					if (isNaN(helperArr[2]))
						helperArr[2] = 0;

					if (number > 0) {
						helperArr[2]++;
						helperArr.push(konotacje[el[0]]);
						helperArr.push(el[0]);
						helperArr.push(number);
					}
					if (isNew)
						arr.push(helperArr);
				}
			});
		});
	}

	przetworzDane();

	var labelContainer = chart.select('#labelContainer');

	var currentYear = 2007;
	var newYear;
	var transitionTime = 700;
	var yearChangeTimeouts = [];

	var stepYear = function (step) {
		if (step) {
			if (currentYear < 2013)
				newYear = currentYear + 1;
			else
				return;
		}

		if (newYear > currentYear && currentYear < 2013)
			currentYear++;
		else if (currentYear > 2007)
			currentYear--;

		drawGraph(dat[currentYear][currentScope][type]);
		setTimeout(function() {
			d3.select("#rok").text(currentYear);
		}, transitionTime / 2);
		d3.select("#yearMarker g").transition().duration(transitionTime).attr('transform','translate(' + (currentYear - 2007) * 100 + ' 0)');

		if (currentYear !== newYear) {
			yearChangeTimeouts.push(setTimeout(function() {
				stepYear();
			}, transitionTime));
		}
		
	}
	
	var changeYear = function(newYearVal) {
		yearChangeTimeouts.forEach(function(i) {
			clearTimeout(i);
		});
		newYear = newYearVal

		if (currentYear != newYear) {
			stepYear();
		}

	}

	var type = 'inst';
	d3.select(".b_" + type).classed('selected', true);
	var clearLabels = false;

	var setType = function(newType) {
		if (type !== newType) {
			pokazujeBank = false;
			jakiBank = false;
			d3.select(".b_" + type).classed('selected', false);
			d3.select(".b_" + newType).classed('selected', true);
			type = newType
			clearLabels = true;
			drawGraph (dat[currentYear][currentScope][type]);
		}
	}

	var currentYear = 2007;
	var currentScope = 'krajowe';
	var lupa = false;

	function wojewod (id) {
        if (pokazujeKraj && jakiKraj === "bud") {
            pokazujeKraj = false;
            jakiKraj = undefined;
        }
		var waitForIt = false;
		if (currentScope !== 'krajowe') {
			d3.select('#' + currentScope).classed('selected', false);
		}
		if (currentScope === id || id === "back") {
			if (zoomIn) {
				waitForIt = true;
				toggleZoom();
			}
			currentScope = 'krajowe';
			lupa = false;
			d3.select("#lupa").transition().duration(transitionTime).attr("style","stroke-opacity:0");
			d3.select("#back").transition().duration(transitionTime).attr("style","stroke-opacity:0;fill-opacity:0");
		} else {
			if (!lupa) {
				lupa = true;
				d3.select("#lupa").transition().duration(transitionTime).attr("style","stroke-opacity:1");
				d3.select("#back").transition().duration(transitionTime).attr("style","stroke-opacity:1;fill-opacity:1");
			}
			currentScope = id;
			d3.select('#' + currentScope).classed('selected', true);
		}
		setTimeout(function() {
			drawGraph (dat[currentYear][currentScope][type]);
		}, Number(waitForIt) * (transitionTime + 1));
	}

	var isRedrawing = false;
	var pokazujeKraj = false;


	var opacznosc = function (element, target) {
		var ownClass = d3.select(element).attr('class');

		if (pokazujeBank && ownClass.indexOf(jakiBank) === -1  || pokazujeKraj && ownClass.indexOf(jakiKraj) === -1) {
			return .05;
		}
		return target;
	}
	
	var virgin = true;
	var zoomIn = false;

	var toggleZoom = function() {
		zoomIn = !zoomIn;
		d3.select("#lupa #verticalLine").classed("invisible", zoomIn);
		drawGraph (dat[currentYear][currentScope][type]);
	}
	
	var klasyOpisowKrajow = {};

	function drawGraph (graphData, zoom, zoomGroup, reset) {

		zoom = pokazujeKraj;
		zoomGroup = jakiKraj;

		if (clearLabels) {
			clearLabels = false;
			d3.selectAll("#logo g").attr("style","opacity:0");
		}
		
		if (currentScope === 'krajowe')
			data = d3.csv.parseRows(graphData);
		else
			data = JSON.parse(JSON.stringify(graphData));

		data.forEach(function(item, index) {
			if (item[1] === 0)
				data.splice(index, 1);
		});

		suma = {};
		var pozycje = {};
		var pozycje2 = {};

		var kraje = [];
		var da = [];
		var size = {};
		var bankiRozmiar = {};
		var total = {};
		var instytucje = [];

		var last0 = 0, current0 = 0, h0 = 0;

		data.sort(function (a ,b) {
			return b[1] - a[1];
		});
	
		var total = 0;

		if (!jakiKraj && !jakiBank) {
			data.forEach(function(value) {
				total += (+value[1]);
			});
			infoBoxText = "";
		} else if (jakiKraj && !jakiBank) {
			data.forEach(function(element) {
				element.forEach(function(value, index, arr) {
					if (value === jakiKraj)
						total += (+arr[index + 1]);
				});
			});
			infoBoxText = jakiKraj;
		} else if (jakiBank && !jakiKraj) {
			data.forEach(function(value) {
				if (value[0] === jakiBank)
					total = +value[1];
			});
			infoBoxText = jakiBank;
		} else {
			data.forEach(function(value) {
				if (value[0] === jakiBank) {
					value.forEach(function(element, index, arr) {
						if (element === jakiKraj)
							total = +arr[index+1];
					});
				}
			});
			infoBoxText = jakiBank;
			//infoBoxSpecial = jakiKraj;
		}
			



		var locale = d3.locale({
  "decimal": ",",
  "thousands": " ",
  "grouping": [3],
  "currency": ["$", ""],
  "dateTime": "%a %b %e %X %Y",
  "date": "%m/%d/%Y",
  "time": "%H:%M:%S",
  "periods": ["AM", "PM"],
  "days": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  "shortDays": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  "months": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  "shortMonths": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

		var holder = d3.select(".infoText");
		var sumaHolder = d3.select(".suma.val");
		var currHolder = d3.select(".suma.curr");
		var infoBox1 = d3.select(".info-box text #line1");
		var infoBox2 = d3.select(".info-box text #line2");
		var infoBox3 = d3.select(".info-box text #line3")
		var woj = d3.select("#wojewodztwo");

		woj
			.transition().duration(500)
			.style("opacity", 0)
			.transition()
			.text(wojewodztwa[currentScope])
			.style("opacity", 1)

		
		holder
			.transition().duration(500)
			.style("opacity", 0)
			.transition()
			.style("opacity", 1)


		infoBox1
			.transition().duration(500).delay(500)
			.text(bankiDlugie[infoBoxText][0])

		infoBox2
			.transition().duration(500).delay(500)
			.text(bankiDlugie[infoBoxText][1])

		infoBox3
			.transition().duration(500).delay(500)
			.text(bankiDlugie[infoBoxText][2])

		sumaHolder
			.transition().duration(500).delay(500)
			.text(locale.numberFormat(",.0f")(total)) 

		data.forEach(function(d,i) {
			jestWlaczony[d[0]] = false;
			bankiRozmiar[d[0]] = d[1];
			for (var i = 0; i < d[2]; i++) {
				//var n = da.push([d[3 + i * 3], d[3 + i * 3 + 1], parseFloat(d[3 + i * 3 + 2]) / parseFloat(d[1]), d[0]]) - 1;
				d[3 + i * 3 + 2] = (parseFloat(d[3 + i * 3 + 2]) * 100 / parseFloat(d[1])).toString() + "%";
				var n = da.push([d[3 + i * 3], d[3 + i * 3 + 1], parseFloat(d[3 + i * 3 + 2]) / 100, d[0]]) - 1;
				total[d[0]] = d[1];
				if (!(size[da[n][1]]))
					size[da[n][1]] = 0;
				size[da[n][1]] += da[n][2] * d[1];
			}
		});


		size["x"] = 0;

		da.sort(function(a,b) {
			if (a[1] != b[1] || a[0] != b[0])
				return size[b[1]] - size[a[1]];
			else
				return b[2] * bankiRozmiar[b[3]] - a[2] * bankiRozmiar[a[3]];
		});

		var klasySamorzadow = {
			gmin: "",
			bud: "",
			pow: "",
			woj: ""
		}

		da.forEach(function(d) {
			klasySamorzadow[d[1]] += d[3] + " ";
		});

		//calosc.selectAll("#logo > g")
		//	.attr("style","opacity:1");

		loga = calosc.selectAll("#logo");
		calosc.selectAll(".zmien").attr("transform","scale(1.01)");

		var odstepLewa = 30;
		var heightAdjust = (zoomIn) ? 0.00035 : 0.00003;

		var delayTime = 000;

		var barsLeft = chart.selectAll(".bar.left")
			.data(data, function(d) { return d[0] });

		var barsLeftEnterSelection = barsLeft.enter().append("rect")
			.style("opacity", "0")
		
		barsLeft
			.attr("class",function(d) { 
				var string = "";
				for (j = 0; j < d[2]; j++) { 
					string += (" "+d[j*3+4]); 
				}
				
				return "bar left "+d[0]+string;
			})
			.transition()
			.duration(transitionTime)
			.attr("x",200)
			.attr("y", function(d,i) {
				last0 = current0;
				h0 = Math.round(d[1]*heightAdjust);
				current0 += (odstepLewa+h0);
				pozycje[d[0]] = [50+last0,50+current0-odstepLewa,d[1]];
				pozycje2[d[0]] = [];

				return 50+last0; 
			})
			.attr("width",60)
			.attr("height",function(d) { return Math.round(d[1]*heightAdjust) || 2; })
			.style("opacity", function (d) { return opacznosc(this, '1'); });

		barsLeft.exit()
			.transition()
			.duration(transitionTime / 2)
			.attr("style", "opacity: 0").remove();

		var nazwy = d3.select("#nazwyInstytucji").selectAll("text").data(data, function(d) { return d[0] });

		nazwy.enter().append("text")
			.style("opacity", 0)
			.attr("x", 0).attr("y", 0)
			.text(function(d) { return banki[d[0]] })
			.attr("transform", function(d) { return "translate(50 " + pozycje[d[0]][0] + ")" } )

		nazwy
			.attr("class", function(d) {
				var string = "";
				for (j = 0; j < d[2]; j++) { 
					string += (" "+d[j*3+4]); 
				}
				
				return d[0] + string; 
			})
			.transition().duration(transitionTime).attr("transform", function(d) { return "translate(50 " + pozycje[d[0]][0] + ")" } )
			.style("opacity", function (d) { return opacznosc(this, 1); });

		nazwy.exit().transition().duration(transitionTime).attr("style", "opacity: 0").remove();

		var last = 0, current = 0, h = 0, kraj = da[0][1]; odstep = 60, przesuniecie = 0;
		var pierwszy = 0, ostatni = 0;

		var barsRight = chart.selectAll(".bar2.right")
			.data(da, function(d) { return d[0] + d[3] })

		var barsRightEnterSelection = barsRight
			.enter().append("rect")
			.attr("class",function(d) { return "bar bar2 right "+d[3]+" "+d[1];})
			.style("opacity", "0")

		var heightZoom = function(d) {
			if (zoom) {
			      if (d === zoomGroup)  {
				if (zoomGroup === "woj")
					return 7;
				if (zoomGroup === "gmin")
					return 1.5;
				if (zoomGroup === "bud")
					return 5;
				return 20;
			      } else {
				      return 0.3;
			      }
			} else {
				return 1;
			}	
		};

		barsRight
			.transition()
			.duration(transitionTime)
			//.attr("style",function(d) { return (d[1] == "x") ? "opacity:.4" : "opacity:1"; })
			.attr("x",400)
			.attr("y", function(d,i) { 
				h = Math.round(d[2]*pozycje[d[3]][2]*heightAdjust * heightZoom(d[1])) || 2;
				przesuniecie = 0;
				if (kraj != d[1]) {
					przesuniecie = odstep;
					kraj = d[1];

					pierwszy = 50+last;
					ostatni = 0;
				}
				if (kraj != kraje[kraje.length-1])
					kraje.push(kraj);
				last = current+przesuniecie;
				current += (h+przesuniecie);
				pozycje2[d[3]].push(50+last);
				pozycje2[d[3]].push(50+current);
				pozycje2[d[3]].push(d[2]); 
				pozycje2[d[3]].push(d[1]); 

				if (!suma[kraj]) 
					suma[kraj] = [last,0];

				suma[kraj][1] += current-last;

				ostatni += Math.round(d[2]*pozycje[d[3]][2]*heightAdjust);

				return 50+last; 
			})
			.attr("width",60)
			.attr("height",function(d) { return Math.round(d[2]*pozycje[d[3]][2]*heightAdjust * heightZoom(d[1])) || 2; })
			.style("opacity", function(d) {
				return opacznosc(this, 1);
			})

		//barsRightEnterSelection.transition().duration(1000).delay(transitionTime / 1.5)
		//	.style("opacity", function(d) {
		///		return opacznosc(d[3], 1);
		//	})

		barsRight.exit()
			.transition()
			.duration(transitionTime / 2)
			.style("opacity", "0")
			.remove();

		przyciski = d3.select("#przezroczyste");

		/*da.forEach(function(d) {
			jestWlaczonyKraj[d[1]] = false;
		});*/

		var teksty = labelContainer.selectAll("text").data(kraje, function(d) { return d });

		teksty.enter().append("text")
			.attr("x",480)
			.attr("y",function(d) { return 55+suma[d][0]+(suma[d][1]/2) })
			.style("opacity", 0);

		teksty
			.text(function(d) { return panstwa[d]; })
			.attr("class", function (d) { return klasySamorzadow[d] + d; })
			.attr("id",function(d) { return d })
			.transition()
			.duration(transitionTime)
			.style("opacity", function(d) { return opacznosc(this, '1') })
			.attr("x",480)
			.attr("y",function(d) { return 55+suma[d][0]+(suma[d][1]/2) })

		teksty.exit().remove();

		przyciski.selectAll('rect').remove();
		ramki.selectAll('rect').remove();
		kraje.forEach(function(d) {

			ramki.append("rect")
				.attr("class","rc "+d)
				.attr("style","opacity:1")
				.attr("x",400)
				.attr("y",50+suma[d][0])
				.attr("width",60)
				.attr("height",suma[d][1]);

			przyciski.append("rect")
				.attr("x", 400)
				.attr("y",40+suma[d][0])
				.attr("width",200)
				.attr("height",suma[d][1] + 20)
				.on("click", function() { pokaz(d, 'kraj') } );

			klasy[d] = "bar "+d;



		});

		polygonData = [];

		data.forEach(function(d) {
			var procOld = 0, procCurrent = 0;
			for (var i = 0; i < d[2]; i++) {
				klasy[d[i*3+4]] += (" "+d[0]);

				procOld = procCurrent;
				procCurrent += Math.round((pozycje[d[0]][1] - pozycje[d[0]][0])*pozycje2[d[0]][i*4+2]);

				polygonData.push({
					class: "link bar "+d[0]+" "+pozycje2[d[0]][i*4+3],
					points: "260,"+(pozycje[d[0]][0]+procOld)+" 400,"+pozycje2[d[0]][i*4]+" 400,"+pozycje2[d[0]][i*4+1]+" 260,"+(pozycje[d[0]][0]+procCurrent) 
				});
			}

			przyciski.append("rect")
				.attr("x", 10)
				.attr("y", pozycje[d[0]][0] - 10)
				.attr("width",250)
				.attr("height",pozycje[d[0]][1]-pozycje[d[0]][0] + 20)
				.on("click",function() {pokaz(d[0],d);})
		});

		var polygons = chart.selectAll("polygon").data(polygonData, function (d) { return d.class });

		var polygonsEnterSelection = polygons.enter()
			.append("polygon")
			.attr("style", "opacity: 0")

		polygons
			.attr("class", function (d) { return d.class; })
			.transition()
			.duration(transitionTime)
			.attr("style", function (d) { return "opacity: " + opacznosc(this, 0.5) })
			.attr("points", function (d) { return d.points; })

		polygons.exit()
			.transition()
			.duration(transitionTime / 2)
			.attr("style","opacity: 0")
			.remove();

		chart.selectAll(".opis")
			.attr("class",function() { return (klasy[this.id]); });

		calosc.attr("style","visibility:visible");

		virgin = false;
	}


	drawGraph(dat[2007].krajowe.inst,null, null, null, 2007, true);

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-52583653-1', 'auto');
  ga('send', 'pageview');

]]></script>
     </svg>





